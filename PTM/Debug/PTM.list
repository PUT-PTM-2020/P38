
PTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e4  080026e4  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026ec  080026ec  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000058  0800274c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800274c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cd5  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001827  00000000  00000000  00027d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001f536  00000000  00000000  00029d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007035  00000000  00000000  000492c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c21f2  00000000  00000000  000502fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001124ed  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000718  00000000  00000000  00112568  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001f18  00000000  00000000  00112c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000058 	.word	0x20000058
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023c4 	.word	0x080023c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	080023c4 	.word	0x080023c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ili9325_Init>:
void     LCD_IO_WriteCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size);
void     LCD_IO_ReadCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize);

//-----------------------------------------------------------------------------
void ili9325_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  if((Is_ili9325_Initialized & ILI9325_LCD_INITIALIZED) == 0)
 80004cc:	4b85      	ldr	r3, [pc, #532]	; (80006e4 <ili9325_Init+0x21c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	f040 8103 	bne.w	80006e0 <ili9325_Init+0x218>
  {
    Is_ili9325_Initialized |= ILI9325_LCD_INITIALIZED;
 80004da:	4b82      	ldr	r3, [pc, #520]	; (80006e4 <ili9325_Init+0x21c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b7f      	ldr	r3, [pc, #508]	; (80006e4 <ili9325_Init+0x21c>)
 80004e6:	701a      	strb	r2, [r3, #0]
    if((Is_ili9325_Initialized & ILI9325_IO_INITIALIZED) == 0)
 80004e8:	4b7e      	ldr	r3, [pc, #504]	; (80006e4 <ili9325_Init+0x21c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f003 0302 	and.w	r3, r3, #2
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d101      	bne.n	80004f8 <ili9325_Init+0x30>
      LCD_IO_Init();
 80004f4:	f000 fbf8 	bl	8000ce8 <LCD_IO_Init>
    Is_ili9325_Initialized |= ILI9325_IO_INITIALIZED;
 80004f8:	4b7a      	ldr	r3, [pc, #488]	; (80006e4 <ili9325_Init+0x21c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b78      	ldr	r3, [pc, #480]	; (80006e4 <ili9325_Init+0x21c>)
 8000504:	701a      	strb	r2, [r3, #0]

    LCD_IO_WriteCmd16(RC(0xF3)); LCD_IO_WriteData16(RC(0x0008));
 8000506:	20f3      	movs	r0, #243	; 0xf3
 8000508:	f000 fbf5 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800050c:	2008      	movs	r0, #8
 800050e:	f000 fc01 	bl	8000d14 <LCD_IO_WriteData16>

    LCD_Delay(5);
 8000512:	2005      	movs	r0, #5
 8000514:	f000 fbd2 	bl	8000cbc <LCD_Delay>

    LCD_IO_WriteCmd16(RC(ILI9325_DRIV_OUT_CTRL)); LCD_IO_WriteData16(RC(ILI9325_DRIV_OUT_CTRL_DATA));
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fbec 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800051e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000522:	f000 fbf7 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DRIV_WAV_CTRL)); LCD_IO_WriteData16(RC(0x0700));
 8000526:	2002      	movs	r0, #2
 8000528:	f000 fbe5 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800052c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8000530:	f000 fbf0 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_DOWN));
 8000534:	2003      	movs	r0, #3
 8000536:	f000 fbde 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800053a:	f241 0030 	movw	r0, #4144	; 0x1030
 800053e:	f000 fbe9 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL2)); LCD_IO_WriteData16(RC(0x0302));
 8000542:	2008      	movs	r0, #8
 8000544:	f000 fbd7 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000548:	f240 3002 	movw	r0, #770	; 0x302
 800054c:	f000 fbe2 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL3)); LCD_IO_WriteData16(RC(0x0000));
 8000550:	2009      	movs	r0, #9
 8000552:	f000 fbd0 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fbdc 	bl	8000d14 <LCD_IO_WriteData16>
    /*POWER CONTROL REGISTER INITIAL*/
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x0000));
 800055c:	2010      	movs	r0, #16
 800055e:	f000 fbca 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fbd6 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0007));
 8000568:	2011      	movs	r0, #17
 800056a:	f000 fbc4 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800056e:	2007      	movs	r0, #7
 8000570:	f000 fbd0 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x0000));
 8000574:	2012      	movs	r0, #18
 8000576:	f000 fbbe 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fbca 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0000));
 8000580:	2013      	movs	r0, #19
 8000582:	f000 fbb8 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fbc4 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_Delay(5);
 800058c:	2005      	movs	r0, #5
 800058e:	f000 fb95 	bl	8000cbc <LCD_Delay>
    /*POWER SUPPPLY STARTUP 1 SETTING*/
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x14B0));
 8000592:	2010      	movs	r0, #16
 8000594:	f000 fbaf 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000598:	f241 40b0 	movw	r0, #5296	; 0x14b0
 800059c:	f000 fbba 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_Delay(5);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fb8b 	bl	8000cbc <LCD_Delay>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0007));
 80005a6:	2011      	movs	r0, #17
 80005a8:	f000 fba5 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80005ac:	2007      	movs	r0, #7
 80005ae:	f000 fbb1 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_Delay(5);
 80005b2:	2005      	movs	r0, #5
 80005b4:	f000 fb82 	bl	8000cbc <LCD_Delay>
    /*POWER SUPPLY STARTUP 2 SETTING*/
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x008E));
 80005b8:	2012      	movs	r0, #18
 80005ba:	f000 fb9c 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80005be:	208e      	movs	r0, #142	; 0x8e
 80005c0:	f000 fba8 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0C00));
 80005c4:	2013      	movs	r0, #19
 80005c6:	f000 fb96 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80005ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80005ce:	f000 fba1 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL7)); LCD_IO_WriteData16(RC(0x0015));
 80005d2:	2029      	movs	r0, #41	; 0x29
 80005d4:	f000 fb8f 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80005d8:	2015      	movs	r0, #21
 80005da:	f000 fb9b 	bl	8000d14 <LCD_IO_WriteData16>

    LCD_Delay(5);
 80005de:	2005      	movs	r0, #5
 80005e0:	f000 fb6c 	bl	8000cbc <LCD_Delay>
    /****GAMMA CLUSTER SETTING****/
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL1)); LCD_IO_WriteData16(RC(0x0000));
 80005e4:	2030      	movs	r0, #48	; 0x30
 80005e6:	f000 fb86 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fb92 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL2)); LCD_IO_WriteData16(RC(0x0107));
 80005f0:	2031      	movs	r0, #49	; 0x31
 80005f2:	f000 fb80 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80005f6:	f240 1007 	movw	r0, #263	; 0x107
 80005fa:	f000 fb8b 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL3)); LCD_IO_WriteData16(RC(0x0000));
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 fb79 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fb85 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL4)); LCD_IO_WriteData16(RC(0x0203));
 800060a:	2035      	movs	r0, #53	; 0x35
 800060c:	f000 fb73 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000610:	f240 2003 	movw	r0, #515	; 0x203
 8000614:	f000 fb7e 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL5)); LCD_IO_WriteData16(RC(0x0402));
 8000618:	2036      	movs	r0, #54	; 0x36
 800061a:	f000 fb6c 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800061e:	f240 4002 	movw	r0, #1026	; 0x402
 8000622:	f000 fb77 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL6)); LCD_IO_WriteData16(RC(0x0000));
 8000626:	2037      	movs	r0, #55	; 0x37
 8000628:	f000 fb65 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fb71 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL7)); LCD_IO_WriteData16(RC(0x0207));
 8000632:	2038      	movs	r0, #56	; 0x38
 8000634:	f000 fb5f 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000638:	f240 2007 	movw	r0, #519	; 0x207
 800063c:	f000 fb6a 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL8)); LCD_IO_WriteData16(RC(0x0000));
 8000640:	2039      	movs	r0, #57	; 0x39
 8000642:	f000 fb58 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fb64 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL9)); LCD_IO_WriteData16(RC(0x0203));
 800064c:	203c      	movs	r0, #60	; 0x3c
 800064e:	f000 fb52 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000652:	f240 2003 	movw	r0, #515	; 0x203
 8000656:	f000 fb5d 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL10)); LCD_IO_WriteData16(RC(0x0403));
 800065a:	203d      	movs	r0, #61	; 0x3d
 800065c:	f000 fb4b 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000660:	f240 4003 	movw	r0, #1027	; 0x403
 8000664:	f000 fb56 	bl	8000d14 <LCD_IO_WriteData16>
    //-DISPLAY WINDOWS 240*320-
    LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000668:	2050      	movs	r0, #80	; 0x50
 800066a:	f000 fb44 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fb50 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));  // 240 - 1
 8000674:	2051      	movs	r0, #81	; 0x51
 8000676:	f000 fb3e 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800067a:	20ef      	movs	r0, #239	; 0xef
 800067c:	f000 fb4a 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000680:	2052      	movs	r0, #82	; 0x52
 8000682:	f000 fb38 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fb44 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1)); // 320 - 1
 800068c:	2053      	movs	r0, #83	; 0x53
 800068e:	f000 fb32 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000692:	f240 103f 	movw	r0, #319	; 0x13f
 8000696:	f000 fb3d 	bl	8000d14 <LCD_IO_WriteData16>
    //----FRAME RATE SETTING-----
    LCD_IO_WriteCmd16(RC(ILI9325_GATE_SCAN_CTRL1)); LCD_IO_WriteData16(RC(ILI9325_GATE_SCAN_CTRL1_DATA));
 800069a:	2060      	movs	r0, #96	; 0x60
 800069c:	f000 fb2b 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006a0:	f44f 4027 	mov.w	r0, #42752	; 0xa700
 80006a4:	f000 fb36 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GATE_SCAN_CTRL2)); LCD_IO_WriteData16(RC(0x0001));
 80006a8:	2061      	movs	r0, #97	; 0x61
 80006aa:	f000 fb24 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 fb30 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_PANEL_IF_CTRL1)); LCD_IO_WriteData16(RC(0x0029)); /* RTNI setting */
 80006b4:	2090      	movs	r0, #144	; 0x90
 80006b6:	f000 fb1e 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006ba:	2029      	movs	r0, #41	; 0x29
 80006bc:	f000 fb2a 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_Delay(5);
 80006c0:	2005      	movs	r0, #5
 80006c2:	f000 fafb 	bl	8000cbc <LCD_Delay>

    //------DISPLAY ON------
    LCD_IO_WriteCmd16(RC(ILI9325_FRM_RATE_COL_CTRL)); LCD_IO_WriteData16(RC(0x000E)); // 110Hz, hogy ne vibráljon
 80006c6:	202b      	movs	r0, #43	; 0x2b
 80006c8:	f000 fb15 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006cc:	200e      	movs	r0, #14
 80006ce:	f000 fb21 	bl	8000d14 <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL1)); LCD_IO_WriteData16(RC(0x0133));
 80006d2:	2007      	movs	r0, #7
 80006d4:	f000 fb0f 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006d8:	f240 1033 	movw	r0, #307	; 0x133
 80006dc:	f000 fb1a 	bl	8000d14 <LCD_IO_WriteData16>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000074 	.word	0x20000074

080006e8 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  ILI9325_LCDMUTEX_PUSH();

  /* Power On sequence -------------------------------------------------------*/
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x0000)); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80006ec:	2010      	movs	r0, #16
 80006ee:	f000 fb02 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 fb0e 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0000)); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80006f8:	2011      	movs	r0, #17
 80006fa:	f000 fafc 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fb08 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x0000)); /* VREG1OUT voltage */
 8000704:	2012      	movs	r0, #18
 8000706:	f000 faf6 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fb02 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0000)); /* VDV[4:0] for VCOM amplitude*/
 8000710:	2013      	movs	r0, #19
 8000712:	f000 faf0 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fafc 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f000 facd 	bl	8000cbc <LCD_Delay>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x14B0));
 8000722:	2010      	movs	r0, #16
 8000724:	f000 fae7 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000728:	f241 40b0 	movw	r0, #5296	; 0x14b0
 800072c:	f000 faf2 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0007));
 8000730:	2011      	movs	r0, #17
 8000732:	f000 fae0 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000736:	2007      	movs	r0, #7
 8000738:	f000 faec 	bl	8000d14 <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x008E)); /* VREG1OUT voltage */
 800073c:	2012      	movs	r0, #18
 800073e:	f000 fada 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000742:	208e      	movs	r0, #142	; 0x8e
 8000744:	f000 fae6 	bl	8000d14 <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0C00));
 8000748:	2013      	movs	r0, #19
 800074a:	f000 fad4 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800074e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000752:	f000 fadf 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL7)); LCD_IO_WriteData16(RC(0x0015));
 8000756:	2029      	movs	r0, #41	; 0x29
 8000758:	f000 facd 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800075c:	2015      	movs	r0, #21
 800075e:	f000 fad9 	bl	8000d14 <LCD_IO_WriteData16>

  /* Display On */
  LCD_IO_WriteCmd16(RC(ILI9325_FRM_RATE_COL_CTRL)); LCD_IO_WriteData16(RC(0x000E)); // 110Hz, hogy ne vibráljon
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f000 fac7 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000768:	200e      	movs	r0, #14
 800076a:	f000 fad3 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL1)); LCD_IO_WriteData16(RC(0x0133)); /* display ON */
 800076e:	2007      	movs	r0, #7
 8000770:	f000 fac1 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000774:	f240 1033 	movw	r0, #307	; 0x133
 8000778:	f000 facc 	bl	8000d14 <LCD_IO_WriteData16>

  LCD_IO_Bl_OnOff(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 faa8 	bl	8000cd2 <LCD_IO_Bl_OnOff>

  ILI9325_LCDMUTEX_POP();
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}

08000786 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  ILI9325_LCDMUTEX_PUSH();

  /* Power Off sequence ------------------------------------------------------*/
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x0000)); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800078a:	2010      	movs	r0, #16
 800078c:	f000 fab3 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fabf 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0000)); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8000796:	2011      	movs	r0, #17
 8000798:	f000 faad 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fab9 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x0000)); /* VREG1OUT voltage */
 80007a2:	2012      	movs	r0, #18
 80007a4:	f000 faa7 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fab3 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0000)); /* VDV[4:0] for VCOM amplitude*/
 80007ae:	2013      	movs	r0, #19
 80007b0:	f000 faa1 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 faad 	bl	8000d14 <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL7)); LCD_IO_WriteData16(RC(0x0000)); /* VCM[4:0] for VCOMH */
 80007ba:	2029      	movs	r0, #41	; 0x29
 80007bc:	f000 fa9b 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 faa7 	bl	8000d14 <LCD_IO_WriteData16>
  
  /* Display Off */
  LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL1)); LCD_IO_WriteData16(RC(0x0));
 80007c6:	2007      	movs	r0, #7
 80007c8:	f000 fa95 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 faa1 	bl	8000d14 <LCD_IO_WriteData16>

  LCD_IO_Bl_OnOff(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fa7d 	bl	8000cd2 <LCD_IO_Bl_OnOff>

  ILI9325_LCDMUTEX_POP();
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  #if ((ILI9325_ORIENTATION == 0) || (ILI9325_ORIENTATION == 2))
  return (uint16_t)ILI9325_LCD_PIXEL_WIDTH;
 80007e0:	23f0      	movs	r3, #240	; 0xf0
  #else
  return (uint16_t)ILI9325_LCD_PIXEL_HEIGHT;
  #endif
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  #if ((ILI9325_ORIENTATION == 0) || (ILI9325_ORIENTATION == 2))
  return (uint16_t)ILI9325_LCD_PIXEL_HEIGHT;
 80007f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
  #else
  return (uint16_t)ILI9325_LCD_PIXEL_WIDTH;
  #endif
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID
  */
uint16_t ili9325_ReadID(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  uint16_t ret;
  ILI9325_LCDMUTEX_PUSH();

  if(Is_ili9325_Initialized == 0)
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <ili9325_ReadID+0x28>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <ili9325_ReadID+0x12>
  {
    ili9325_Init();
 800080e:	f7ff fe5b 	bl	80004c8 <ili9325_Init>
  }
  LCD_IO_ReadCmd16MultipleData16(RC(0x00), &ret, 1, 2);
 8000812:	1db9      	adds	r1, r7, #6
 8000814:	2302      	movs	r3, #2
 8000816:	2201      	movs	r2, #1
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fac9 	bl	8000db0 <LCD_IO_ReadCmd16MultipleData16>

  ILI9325_LCDMUTEX_POP();

  return RD(ret);
 800081e:	88fb      	ldrh	r3, [r7, #6]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000074 	.word	0x20000074

0800082c <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	80bb      	strh	r3, [r7, #4]
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 800083c:	2020      	movs	r0, #32
 800083e:	f000 fa5a 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fa65 	bl	8000d14 <LCD_IO_WriteData16>
 800084a:	2021      	movs	r0, #33	; 0x21
 800084c:	f000 fa53 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000850:	88bb      	ldrh	r3, [r7, #4]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fa5e 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	460b      	mov	r3, r1
 800086c:	80bb      	strh	r3, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	807b      	strh	r3, [r7, #2]
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000872:	2020      	movs	r0, #32
 8000874:	f000 fa3f 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fa4a 	bl	8000d14 <LCD_IO_WriteData16>
 8000880:	2021      	movs	r0, #33	; 0x21
 8000882:	f000 fa38 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa43 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_RW_GRAM)); LCD_IO_WriteData16(RGBCode);
 800088e:	2022      	movs	r0, #34	; 0x22
 8000890:	f000 fa31 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa3c 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	80fb      	strh	r3, [r7, #6]
 80008b0:	4613      	mov	r3, r2
 80008b2:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 80008b4:	2020      	movs	r0, #32
 80008b6:	f000 fa1e 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa29 	bl	8000d14 <LCD_IO_WriteData16>
 80008c2:	2021      	movs	r0, #33	; 0x21
 80008c4:	f000 fa17 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa22 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_ReadCmd16MultipleData16(RC(ILI9325_RW_GRAM), &ret, 1, 2);
 80008d0:	f107 010e 	add.w	r1, r7, #14
 80008d4:	2302      	movs	r3, #2
 80008d6:	2201      	movs	r2, #1
 80008d8:	2022      	movs	r0, #34	; 0x22
 80008da:	f000 fa69 	bl	8000db0 <LCD_IO_ReadCmd16MultipleData16>
  ILI9325_LCDMUTEX_POP();
  return ret;
 80008de:	89fb      	ldrh	r3, [r7, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4603      	mov	r3, r0
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	807b      	strh	r3, [r7, #2]
 8000902:	4613      	mov	r3, r2
 8000904:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();

  #if (ILI9325_ORIENTATION == 0) || (ILI9325_ORIENTATION == 2)
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RD(Xpos));
 8000906:	2050      	movs	r0, #80	; 0x50
 8000908:	f000 f9f5 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fa00 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RD(Xpos + Width - 1));
 8000914:	2051      	movs	r0, #81	; 0x51
 8000916:	f000 f9ee 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800091a:	88fa      	ldrh	r2, [r7, #6]
 800091c:	887b      	ldrh	r3, [r7, #2]
 800091e:	4413      	add	r3, r2
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9f4 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RD(Ypos));
 800092c:	2052      	movs	r0, #82	; 0x52
 800092e:	f000 f9e2 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f9ed 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RD(Ypos + Height - 1));
 800093a:	2053      	movs	r0, #83	; 0x53
 800093c:	f000 f9db 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000940:	88ba      	ldrh	r2, [r7, #4]
 8000942:	883b      	ldrh	r3, [r7, #0]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f9e1 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RD(Xpos));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RD(Xpos + Width - 1));
  #endif

  ILI9325_LCDMUTEX_POP();
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bd90      	pop	{r4, r7, pc}

0800095a <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800095a:	b590      	push	{r4, r7, lr}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	461a      	mov	r2, r3
 8000968:	4623      	mov	r3, r4
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	4603      	mov	r3, r0
 800096e:	80bb      	strh	r3, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000978:	2020      	movs	r0, #32
 800097a:	f000 f9bc 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800097e:	88bb      	ldrh	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f9c7 	bl	8000d14 <LCD_IO_WriteData16>
 8000986:	2021      	movs	r0, #33	; 0x21
 8000988:	f000 f9b5 	bl	8000cf6 <LCD_IO_WriteCmd16>
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f9c0 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16DataFill16(RC(ILI9325_RW_GRAM), RGBCode, Length);
 8000994:	883a      	ldrh	r2, [r7, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	4619      	mov	r1, r3
 800099a:	2022      	movs	r0, #34	; 0x22
 800099c:	f000 f9ca 	bl	8000d34 <LCD_IO_WriteCmd16DataFill16>
  ILI9325_LCDMUTEX_POP();
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	80fb      	strh	r3, [r7, #6]
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_DOWN_THEN_RIGHT));
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 f995 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80009cc:	f241 0038 	movw	r0, #4152	; 0x1038
 80009d0:	f000 f9a0 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_SETCURSOR(Xpos, Ypos);
 80009d4:	2020      	movs	r0, #32
 80009d6:	f000 f98e 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f999 	bl	8000d14 <LCD_IO_WriteData16>
 80009e2:	2021      	movs	r0, #33	; 0x21
 80009e4:	f000 f987 	bl	8000cf6 <LCD_IO_WriteCmd16>
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f992 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16DataFill16(RC(ILI9325_RW_GRAM), RGBCode, Length);
 80009f0:	883a      	ldrh	r2, [r7, #0]
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2022      	movs	r0, #34	; 0x22
 80009f8:	f000 f99c 	bl	8000d34 <LCD_IO_WriteCmd16DataFill16>
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_DOWN));
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f97a 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a02:	f241 0030 	movw	r0, #4144	; 0x1030
 8000a06:	f000 f985 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}

08000a12 <ili9325_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9325_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000a12:	b590      	push	{r4, r7, lr}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4604      	mov	r4, r0
 8000a1a:	4608      	mov	r0, r1
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4623      	mov	r3, r4
 8000a22:	80fb      	strh	r3, [r7, #6]
 8000a24:	4603      	mov	r3, r0
 8000a26:	80bb      	strh	r3, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  ili9325_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000a30:	883b      	ldrh	r3, [r7, #0]
 8000a32:	887a      	ldrh	r2, [r7, #2]
 8000a34:	88b9      	ldrh	r1, [r7, #4]
 8000a36:	88f8      	ldrh	r0, [r7, #6]
 8000a38:	f7ff ff56 	bl	80008e8 <ili9325_SetDisplayWindow>
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f000 f95a 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f965 	bl	8000d14 <LCD_IO_WriteData16>
 8000a4a:	2021      	movs	r0, #33	; 0x21
 8000a4c:	f000 f953 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f95e 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16DataFill16(RC(ILI9325_RW_GRAM), RGBCode, Xsize * Ysize);
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	883a      	ldrh	r2, [r7, #0]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	8b3b      	ldrh	r3, [r7, #24]
 8000a64:	4619      	mov	r1, r3
 8000a66:	2022      	movs	r0, #34	; 0x22
 8000a68:	f000 f964 	bl	8000d34 <LCD_IO_WriteCmd16DataFill16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000a6c:	2050      	movs	r0, #80	; 0x50
 8000a6e:	f000 f942 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f94e 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
 8000a78:	2051      	movs	r0, #81	; 0x51
 8000a7a:	f000 f93c 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a7e:	20ef      	movs	r0, #239	; 0xef
 8000a80:	f000 f948 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000a84:	2052      	movs	r0, #82	; 0x52
 8000a86:	f000 f936 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f942 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
 8000a90:	2053      	movs	r0, #83	; 0x53
 8000a92:	f000 f930 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000a96:	f240 103f 	movw	r0, #319	; 0x13f
 8000a9a:	f000 f93b 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}

08000aa6 <ili9325_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	603a      	str	r2, [r7, #0]
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3316      	adds	r3, #22
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3317      	adds	r3, #23
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	3b01      	subs	r3, #1
 8000ade:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3304      	adds	r3, #4
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	461a      	mov	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	330a      	adds	r3, #10
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	041b      	lsls	r3, r3, #16
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
  size = (size - index) / 2;
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	085b      	lsrs	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	603b      	str	r3, [r7, #0]

  ILI9325_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_UP));
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f000 f8e3 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b30:	f241 0010 	movw	r0, #4112	; 0x1010
 8000b34:	f000 f8ee 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f000 f8dc 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f8e7 	bl	8000d14 <LCD_IO_WriteData16>
 8000b46:	2021      	movs	r0, #33	; 0x21
 8000b48:	f000 f8d5 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b4c:	88bb      	ldrh	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f8e0 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16MultipleData16(RC(ILI9325_RW_GRAM), (uint16_t *)pbmp, size);
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	2022      	movs	r0, #34	; 0x22
 8000b5a:	f000 f909 	bl	8000d70 <LCD_IO_WriteCmd16MultipleData16>
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_DOWN));
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f8c9 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b64:	f241 0030 	movw	r0, #4144	; 0x1030
 8000b68:	f000 f8d4 	bl	8000d14 <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000b6c:	2050      	movs	r0, #80	; 0x50
 8000b6e:	f000 f8c2 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f8ce 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
 8000b78:	2051      	movs	r0, #81	; 0x51
 8000b7a:	f000 f8bc 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b7e:	20ef      	movs	r0, #239	; 0xef
 8000b80:	f000 f8c8 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000b84:	2052      	movs	r0, #82	; 0x52
 8000b86:	f000 f8b6 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f8c2 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
 8000b90:	2053      	movs	r0, #83	; 0x53
 8000b92:	f000 f8b0 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000b96:	f240 103f 	movw	r0, #319	; 0x13f
 8000b9a:	f000 f8bb 	bl	8000d14 <LCD_IO_WriteData16>

  ILI9325_LCDMUTEX_POP();
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <ili9325_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4604      	mov	r4, r0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	80fb      	strh	r3, [r7, #6]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80bb      	strh	r3, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  ili9325_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000bc4:	883b      	ldrh	r3, [r7, #0]
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	88b9      	ldrh	r1, [r7, #4]
 8000bca:	88f8      	ldrh	r0, [r7, #6]
 8000bcc:	f7ff fe8c 	bl	80008e8 <ili9325_SetDisplayWindow>
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000bd0:	2020      	movs	r0, #32
 8000bd2:	f000 f890 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f89b 	bl	8000d14 <LCD_IO_WriteData16>
 8000bde:	2021      	movs	r0, #33	; 0x21
 8000be0:	f000 f889 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f894 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16MultipleData16(RC(ILI9325_RW_GRAM), (uint16_t *)pdata, Xsize * Ysize);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	883a      	ldrh	r2, [r7, #0]
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	69b9      	ldr	r1, [r7, #24]
 8000bf8:	2022      	movs	r0, #34	; 0x22
 8000bfa:	f000 f8b9 	bl	8000d70 <LCD_IO_WriteCmd16MultipleData16>

  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000bfe:	2050      	movs	r0, #80	; 0x50
 8000c00:	f000 f879 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 f885 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
 8000c0a:	2051      	movs	r0, #81	; 0x51
 8000c0c:	f000 f873 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000c10:	20ef      	movs	r0, #239	; 0xef
 8000c12:	f000 f87f 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000c16:	2052      	movs	r0, #82	; 0x52
 8000c18:	f000 f86d 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 f879 	bl	8000d14 <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
 8000c22:	2053      	movs	r0, #83	; 0x53
 8000c24:	f000 f867 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000c28:	f240 103f 	movw	r0, #319	; 0x13f
 8000c2c:	f000 f872 	bl	8000d14 <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <ili9325_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9325_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80bb      	strh	r3, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	807b      	strh	r3, [r7, #2]
 8000c52:	4613      	mov	r3, r2
 8000c54:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
  #else
  for(uint16_t yp = Ypos; yp < Ypos + Ysize; yp++)
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	e025      	b.n	8000ca8 <ili9325_ReadRGBImage+0x70>
    for(uint16_t xp = Xpos; xp < Xpos + Xsize; xp++)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	81bb      	strh	r3, [r7, #12]
 8000c60:	e019      	b.n	8000c96 <ili9325_ReadRGBImage+0x5e>
    { // mivel memoria olvasáskor nem lépteti a memoriacimet automatikusan csak ez a modszer marad :(
      ILI9325_SETCURSOR(xp, yp);
 8000c62:	2020      	movs	r0, #32
 8000c64:	f000 f847 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000c68:	89bb      	ldrh	r3, [r7, #12]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f852 	bl	8000d14 <LCD_IO_WriteData16>
 8000c70:	2021      	movs	r0, #33	; 0x21
 8000c72:	f000 f840 	bl	8000cf6 <LCD_IO_WriteCmd16>
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f84b 	bl	8000d14 <LCD_IO_WriteData16>
      LCD_IO_ReadCmd16MultipleData16(RC(ILI9325_RW_GRAM), (uint16_t *)pdata, 1, 2);
 8000c7e:	2302      	movs	r3, #2
 8000c80:	2201      	movs	r2, #1
 8000c82:	6a39      	ldr	r1, [r7, #32]
 8000c84:	2022      	movs	r0, #34	; 0x22
 8000c86:	f000 f893 	bl	8000db0 <LCD_IO_ReadCmd16MultipleData16>
      pdata += 2;
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
    for(uint16_t xp = Xpos; xp < Xpos + Xsize; xp++)
 8000c90:	89bb      	ldrh	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	81bb      	strh	r3, [r7, #12]
 8000c96:	89ba      	ldrh	r2, [r7, #12]
 8000c98:	88f9      	ldrh	r1, [r7, #6]
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbdf      	blt.n	8000c62 <ili9325_ReadRGBImage+0x2a>
  for(uint16_t yp = Ypos; yp < Ypos + Ysize; yp++)
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	81fb      	strh	r3, [r7, #14]
 8000ca8:	89fa      	ldrh	r2, [r7, #14]
 8000caa:	88b9      	ldrh	r1, [r7, #4]
 8000cac:	883b      	ldrh	r3, [r7, #0]
 8000cae:	440b      	add	r3, r1
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbd3      	blt.n	8000c5c <ili9325_ReadRGBImage+0x24>
    }
  #endif
  ILI9325_LCDMUTEX_POP();
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 fb6d 	bl	80013a4 <HAL_Delay>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  LCD_Delay(1);
  LCD_RST_ON;
  LCD_Delay(1);
  LCD_RST_OFF;
  #endif
  LCD_Delay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff ffe5 	bl	8000cbc <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <LCD_IO_WriteCmd16>:
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd16(uint16_t Cmd)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_BASE = Cmd;
 8000d00:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	8013      	strh	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LCD_IO_WriteData16>:
  *(volatile uint16_t *)LCD_ADDR_DATA = (uint16_t)Data;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = Data;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <LCD_IO_WriteData16+0x1c>)
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	8013      	strh	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	600000fe 	.word	0x600000fe

08000d34 <LCD_IO_WriteCmd16DataFill16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd16DataFill16(uint16_t Cmd, uint16_t Data, uint32_t Size)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	603a      	str	r2, [r7, #0]
 8000d3e:	80fb      	strh	r3, [r7, #6]
 8000d40:	460b      	mov	r3, r1
 8000d42:	80bb      	strh	r3, [r7, #4]
  *(volatile uint16_t *)LCD_ADDR_BASE = Cmd;
 8000d44:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	8013      	strh	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000d4c:	e002      	b.n	8000d54 <LCD_IO_WriteCmd16DataFill16+0x20>
    *(volatile uint16_t *)LCD_ADDR_DATA = Data;
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <LCD_IO_WriteCmd16DataFill16+0x38>)
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	603a      	str	r2, [r7, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f7      	bne.n	8000d4e <LCD_IO_WriteCmd16DataFill16+0x1a>

  #else
  LCD_FSMC_DMA(&Data, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	600000fe 	.word	0x600000fe

08000d70 <LCD_IO_WriteCmd16MultipleData16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	81fb      	strh	r3, [r7, #14]
  *(volatile uint16_t *)LCD_ADDR_BASE = Cmd;
 8000d7e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	8013      	strh	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 1
  while(Size--)
 8000d86:	e006      	b.n	8000d96 <LCD_IO_WriteCmd16MultipleData16+0x26>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = *pData;
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <LCD_IO_WriteCmd16MultipleData16+0x3c>)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	8013      	strh	r3, [r2, #0]
    pData++;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3302      	adds	r3, #2
 8000d94:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f3      	bne.n	8000d88 <LCD_IO_WriteCmd16MultipleData16+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 1);
  #endif
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	600000fe 	.word	0x600000fe

08000db0 <LCD_IO_ReadCmd16MultipleData16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	81fb      	strh	r3, [r7, #14]
  #pragma GCC diagnostic pop
  #elif   defined(__CC_ARM)
  uint16_t DummyData;
  #endif

  *(volatile uint16_t *)LCD_ADDR_BASE = Cmd;
 8000dc0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	8013      	strh	r3, [r2, #0]

  while(DummySize--)
 8000dc8:	e002      	b.n	8000dd0 <LCD_IO_ReadCmd16MultipleData16+0x20>
    DummyData = *(volatile uint16_t *)LCD_ADDR_DATA;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <LCD_IO_ReadCmd16MultipleData16+0x54>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	82fb      	strh	r3, [r7, #22]
  while(DummySize--)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	1e5a      	subs	r2, r3, #1
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f7      	bne.n	8000dca <LCD_IO_ReadCmd16MultipleData16+0x1a>

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 1
  while(Size)
 8000dda:	e00a      	b.n	8000df2 <LCD_IO_ReadCmd16MultipleData16+0x42>
  {
    *pData = *(volatile uint16_t *)LCD_ADDR_DATA;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <LCD_IO_ReadCmd16MultipleData16+0x54>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	801a      	strh	r2, [r3, #0]
    pData++;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3302      	adds	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
    Size--;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
  while(Size)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f1      	bne.n	8000ddc <LCD_IO_ReadCmd16MultipleData16+0x2c>
  }

  #else
  LCD_FSMC_DMA(LCD_ADDR_DATA, pData, 0, 1, Size, 1);
  #endif
}
 8000df8:	bf00      	nop
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	600000fe 	.word	0x600000fe

08000e08 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <BSP_LCD_Init+0x3c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <BSP_LCD_Init+0x3c>)
 8000e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <BSP_LCD_Init+0x3c>)
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <BSP_LCD_Init+0x40>)
 8000e24:	609a      	str	r2, [r3, #8]
  
  /* LCD Init */   
  lcd_drv->Init();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <BSP_LCD_Init+0x44>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4798      	blx	r3
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f826 	bl	8000e80 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000007c 	.word	0x2000007c
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000048 	.word	0x20000048

08000e50 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <BSP_LCD_GetXSize+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	4798      	blx	r3
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000048 	.word	0x20000048

08000e68 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <BSP_LCD_GetYSize+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	4798      	blx	r3
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000048 	.word	0x20000048

08000e80 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
  #ifdef   LCD_DRVTYPE_V1_1
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <BSP_LCD_Clear+0x38>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000e90:	f7ff ffde 	bl	8000e50 <BSP_LCD_GetXSize>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461d      	mov	r5, r3
 8000e98:	f7ff ffe6 	bl	8000e68 <BSP_LCD_GetYSize>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	47a0      	blx	r4
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
  }
  DrawProp.TextColor = color_backup; 
  BSP_LCD_SetTextColor(DrawProp.TextColor);
  #endif
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000048 	.word	0x20000048

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 f9fe 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f808 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f870 	bl	8000fac <MX_GPIO_Init>
  MX_FSMC_Init();
 8000ecc:	f000 f8a4 	bl	8001018 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  	  BSP_LCD_Init();
 8000ed0:	f7ff ff9a 	bl	8000e08 <BSP_LCD_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <main+0x18>
	...

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fa64 	bl	80023b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <SystemClock_Config+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f4c:	23a8      	movs	r3, #168	; 0xa8
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fcc3 	bl	80018e8 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f68:	f000 f8b6 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2105      	movs	r1, #5
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 ff1c 	bl	8001dc8 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f96:	f000 f89f 	bl	80010d8 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3750      	adds	r7, #80	; 0x50
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_GPIO_Init+0x68>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <MX_GPIO_Init+0x68>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_GPIO_Init+0x68>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800

08001018 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001032:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001036:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_FSMC_Init+0xb8>)
 800103a:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <MX_FSMC_Init+0xbc>)
 800103c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_FSMC_Init+0xb8>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001052:	2210      	movs	r2, #16
 8001054:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_FSMC_Init+0xb8>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_FSMC_Init+0xb8>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_FSMC_Init+0xb8>)
 800107e:	2200      	movs	r2, #0
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001084:	2200      	movs	r2, #0
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_FSMC_Init+0xb8>)
 800108a:	2200      	movs	r2, #0
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_FSMC_Init+0xb8>)
 8001090:	2200      	movs	r2, #0
 8001092:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001094:	2306      	movs	r3, #6
 8001096:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001098:	230f      	movs	r3, #15
 800109a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 800109c:	2306      	movs	r3, #6
 800109e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010a4:	2310      	movs	r3, #16
 80010a6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010a8:	2311      	movs	r3, #17
 80010aa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_FSMC_Init+0xb8>)
 80010b8:	f001 f844 	bl	8002144 <HAL_SRAM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80010c2:	f000 f809 	bl	80010d8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80010c6:	bf00      	nop
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000094 	.word	0x20000094
 80010d4:	a0000104 	.word	0xa0000104

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_MspInit+0x4c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_FSMC_MspInit+0x88>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d131      	bne.n	80011b8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_FSMC_MspInit+0x88>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_FSMC_MspInit+0x8c>)
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_FSMC_MspInit+0x8c>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6393      	str	r3, [r2, #56]	; 0x38
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_FSMC_MspInit+0x8c>)
 800116c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001176:	f64f 7380 	movw	r3, #65408	; 0xff80
 800117a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001188:	230c      	movs	r3, #12
 800118a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <HAL_FSMC_MspInit+0x90>)
 8001192:	f000 fa0f 	bl	80015b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001196:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800119a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011a8:	230c      	movs	r3, #12
 80011aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_FSMC_MspInit+0x94>)
 80011b2:	f000 f9ff 	bl	80015b4 <HAL_GPIO_Init>
 80011b6:	e000      	b.n	80011ba <HAL_FSMC_MspInit+0x82>
    return;
 80011b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000078 	.word	0x20000078
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80011d8:	f7ff ffae 	bl	8001138 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f894 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SystemInit+0x28>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <SystemInit+0x28>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SystemInit+0x28>)
 8001256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125a:	609a      	str	r2, [r3, #8]
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001270:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001272:	e003      	b.n	800127c <LoopCopyDataInit>

08001274 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001276:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001278:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800127a:	3104      	adds	r1, #4

0800127c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001280:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001282:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001284:	d3f6      	bcc.n	8001274 <CopyDataInit>
  ldr  r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001288:	e002      	b.n	8001290 <LoopFillZerobss>

0800128a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800128a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800128c:	f842 3b04 	str.w	r3, [r2], #4

08001290 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001294:	d3f9      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001296:	f7ff ffd3 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f001 f867 	bl	800236c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fe0d 	bl	8000ebc <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012a8:	080026f4 	.word	0x080026f4
  ldr  r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012b0:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 80012b4:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 80012b8:	200000ec 	.word	0x200000ec

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_Init+0x40>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_Init+0x40>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x40>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f92f 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fef8 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f939 	bl	800159a <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f90f 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000004c 	.word	0x2000004c
 800135c:	20000054 	.word	0x20000054
 8001360:	20000050 	.word	0x20000050

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000054 	.word	0x20000054
 8001388:	200000e8 	.word	0x200000e8

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200000e8 	.word	0x200000e8

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_Delay+0x40>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000054 	.word	0x20000054

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff47 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff5c 	bl	8001430 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb0 	bl	8001508 <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e16b      	b.n	80018a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 815a 	bne.w	80018a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00b      	beq.n	800160e <HAL_GPIO_Init+0x5a>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001602:	2b11      	cmp	r3, #17
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b12      	cmp	r3, #18
 800160c:	d130      	bne.n	8001670 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0xfc>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b12      	cmp	r3, #18
 80016ae:	d123      	bne.n	80016f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0203 	and.w	r2, r3, #3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80b4 	beq.w	80018a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_GPIO_Init+0x308>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_GPIO_Init+0x308>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_GPIO_Init+0x308>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <HAL_GPIO_Init+0x30c>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <HAL_GPIO_Init+0x310>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <HAL_GPIO_Init+0x226>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <HAL_GPIO_Init+0x314>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x222>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x318>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x21e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_GPIO_Init+0x31c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x21a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_GPIO_Init+0x320>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x216>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x324>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x212>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <HAL_GPIO_Init+0x328>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_GPIO_Init+0x32c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x20a>
 80017ba:	2307      	movs	r3, #7
 80017bc:	e00e      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017be:	2308      	movs	r3, #8
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4934      	ldr	r1, [pc, #208]	; (80018c0 <HAL_GPIO_Init+0x30c>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_GPIO_Init+0x330>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181e:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <HAL_GPIO_Init+0x330>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x330>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_GPIO_Init+0x330>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae90 	bls.w	80015d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40021400 	.word	0x40021400
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40021c00 	.word	0x40021c00
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e25b      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d075      	beq.n	80019f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001906:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b04      	cmp	r3, #4
 8001910:	d00c      	beq.n	800192c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001912:	4ba0      	ldr	r3, [pc, #640]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800191a:	2b08      	cmp	r3, #8
 800191c:	d112      	bne.n	8001944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191e:	4b9d      	ldr	r3, [pc, #628]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192a:	d10b      	bne.n	8001944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	4b99      	ldr	r3, [pc, #612]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d05b      	beq.n	80019f0 <HAL_RCC_OscConfig+0x108>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d157      	bne.n	80019f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e236      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x74>
 800194e:	4b91      	ldr	r3, [pc, #580]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a90      	ldr	r2, [pc, #576]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e01d      	b.n	8001998 <HAL_RCC_OscConfig+0xb0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x98>
 8001966:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a8a      	ldr	r2, [pc, #552]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a87      	ldr	r2, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0xb0>
 8001980:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a83      	ldr	r2, [pc, #524]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a80      	ldr	r2, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fcf4 	bl	800138c <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fcf0 	bl	800138c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1fb      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0xc0>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fce0 	bl	800138c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fcdc 	bl	800138c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1e7      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	4b6c      	ldr	r3, [pc, #432]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0xe8>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d063      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019fe:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0a:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d11c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x152>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1bb      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4952      	ldr	r1, [pc, #328]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <HAL_RCC_OscConfig+0x2b0>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fc95 	bl	800138c <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff fc91 	bl	800138c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e19c      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4940      	ldr	r1, [pc, #256]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0x2b0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc74 	bl	800138c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fc70 	bl	800138c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e17b      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d030      	beq.n	8001b34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_OscConfig+0x2b4>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fc54 	bl	800138c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fc50 	bl	800138c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e15b      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x200>
 8001b06:	e015      	b.n	8001b34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_OscConfig+0x2b4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fc3d 	bl	800138c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff fc39 	bl	800138c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e144      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a0 	beq.w	8001c82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x2b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_RCC_OscConfig+0x2b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_RCC_OscConfig+0x2b8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fbff 	bl	800138c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e011      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2ce>
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	42470000 	.word	0x42470000
 8001b9c:	42470e80 	.word	0x42470e80
 8001ba0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba4:	f7ff fbf2 	bl	800138c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0fd      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x4d4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d106      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
 8001bca:	4b7d      	ldr	r3, [pc, #500]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a7c      	ldr	r2, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd6:	e01c      	b.n	8001c12 <HAL_RCC_OscConfig+0x32a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x312>
 8001be0:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a76      	ldr	r2, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	4b74      	ldr	r3, [pc, #464]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a73      	ldr	r2, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	e00b      	b.n	8001c12 <HAL_RCC_OscConfig+0x32a>
 8001bfa:	4b71      	ldr	r3, [pc, #452]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a70      	ldr	r2, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	4b6e      	ldr	r3, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a6d      	ldr	r2, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d015      	beq.n	8001c46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fbb7 	bl	800138c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff fbb3 	bl	800138c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0bc      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c38:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ee      	beq.n	8001c22 <HAL_RCC_OscConfig+0x33a>
 8001c44:	e014      	b.n	8001c70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fba1 	bl	800138c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff fb9d 	bl	800138c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0a6      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ee      	bne.n	8001c4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d105      	bne.n	8001c82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a51      	ldr	r2, [pc, #324]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8092 	beq.w	8001db0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d05c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d141      	bne.n	8001d24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <HAL_RCC_OscConfig+0x4dc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb71 	bl	800138c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fb6d 	bl	800138c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e078      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	061b      	lsls	r3, r3, #24
 8001cf0:	4933      	ldr	r1, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x4dc>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb46 	bl	800138c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff fb42 	bl	800138c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04d      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x41c>
 8001d22:	e045      	b.n	8001db0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x4dc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fb2f 	bl	800138c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff fb2b 	bl	800138c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e036      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x44a>
 8001d50:	e02e      	b.n	8001db0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e029      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_RCC_OscConfig+0x4d8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d115      	bne.n	8001dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d10d      	bne.n	8001dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470060 	.word	0x42470060

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0cc      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b68      	ldr	r3, [pc, #416]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d90c      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b65      	ldr	r3, [pc, #404]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0b8      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1c:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	494d      	ldr	r1, [pc, #308]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d044      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d119      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e067      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4934      	ldr	r1, [pc, #208]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff fa68 	bl	800138c <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff fa64 	bl	800138c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d20c      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e032      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4916      	ldr	r1, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4e:	f000 f821 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f52:	4601      	mov	r1, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	fa21 f303 	lsr.w	r3, r1, r3
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f9c8 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	080026d4 	.word	0x080026d4
 8001f8c:	2000004c 	.word	0x2000004c
 8001f90:	20000050 	.word	0x20000050

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d007      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x32>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x38>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 80b4 	bne.w	8002128 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b5e      	ldr	r3, [pc, #376]	; (800213c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fc2:	60bb      	str	r3, [r7, #8]
       break;
 8001fc4:	e0b3      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fc8:	60bb      	str	r3, [r7, #8]
      break;
 8001fca:	e0b0      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fcc:	4b5a      	ldr	r3, [pc, #360]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d04a      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	f04f 0400 	mov.w	r4, #0
 8001fec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	ea03 0501 	and.w	r5, r3, r1
 8001ff8:	ea04 0602 	and.w	r6, r4, r2
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	4632      	mov	r2, r6
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	f04f 0400 	mov.w	r4, #0
 8002008:	0154      	lsls	r4, r2, #5
 800200a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800200e:	014b      	lsls	r3, r1, #5
 8002010:	4619      	mov	r1, r3
 8002012:	4622      	mov	r2, r4
 8002014:	1b49      	subs	r1, r1, r5
 8002016:	eb62 0206 	sbc.w	r2, r2, r6
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	f04f 0400 	mov.w	r4, #0
 8002022:	0194      	lsls	r4, r2, #6
 8002024:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002028:	018b      	lsls	r3, r1, #6
 800202a:	1a5b      	subs	r3, r3, r1
 800202c:	eb64 0402 	sbc.w	r4, r4, r2
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	00e2      	lsls	r2, r4, #3
 800203a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800203e:	00d9      	lsls	r1, r3, #3
 8002040:	460b      	mov	r3, r1
 8002042:	4614      	mov	r4, r2
 8002044:	195b      	adds	r3, r3, r5
 8002046:	eb44 0406 	adc.w	r4, r4, r6
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	0262      	lsls	r2, r4, #9
 8002054:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002058:	0259      	lsls	r1, r3, #9
 800205a:	460b      	mov	r3, r1
 800205c:	4614      	mov	r4, r2
 800205e:	4618      	mov	r0, r3
 8002060:	4621      	mov	r1, r4
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f04f 0400 	mov.w	r4, #0
 8002068:	461a      	mov	r2, r3
 800206a:	4623      	mov	r3, r4
 800206c:	f7fe f8ac 	bl	80001c8 <__aeabi_uldivmod>
 8002070:	4603      	mov	r3, r0
 8002072:	460c      	mov	r4, r1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e049      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	f04f 0400 	mov.w	r4, #0
 8002082:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	ea03 0501 	and.w	r5, r3, r1
 800208e:	ea04 0602 	and.w	r6, r4, r2
 8002092:	4629      	mov	r1, r5
 8002094:	4632      	mov	r2, r6
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f04f 0400 	mov.w	r4, #0
 800209e:	0154      	lsls	r4, r2, #5
 80020a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020a4:	014b      	lsls	r3, r1, #5
 80020a6:	4619      	mov	r1, r3
 80020a8:	4622      	mov	r2, r4
 80020aa:	1b49      	subs	r1, r1, r5
 80020ac:	eb62 0206 	sbc.w	r2, r2, r6
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	0194      	lsls	r4, r2, #6
 80020ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020be:	018b      	lsls	r3, r1, #6
 80020c0:	1a5b      	subs	r3, r3, r1
 80020c2:	eb64 0402 	sbc.w	r4, r4, r2
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	00e2      	lsls	r2, r4, #3
 80020d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020d4:	00d9      	lsls	r1, r3, #3
 80020d6:	460b      	mov	r3, r1
 80020d8:	4614      	mov	r4, r2
 80020da:	195b      	adds	r3, r3, r5
 80020dc:	eb44 0406 	adc.w	r4, r4, r6
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	02a2      	lsls	r2, r4, #10
 80020ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020ee:	0299      	lsls	r1, r3, #10
 80020f0:	460b      	mov	r3, r1
 80020f2:	4614      	mov	r4, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	4621      	mov	r1, r4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f04f 0400 	mov.w	r4, #0
 80020fe:	461a      	mov	r2, r3
 8002100:	4623      	mov	r3, r4
 8002102:	f7fe f861 	bl	80001c8 <__aeabi_uldivmod>
 8002106:	4603      	mov	r3, r0
 8002108:	460c      	mov	r4, r1
 800210a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	60bb      	str	r3, [r7, #8]
      break;
 8002126:	e002      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800212a:	60bb      	str	r3, [r7, #8]
      break;
 800212c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212e:	68bb      	ldr	r3, [r7, #8]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	00f42400 	.word	0x00f42400
 8002140:	007a1200 	.word	0x007a1200

08002144 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e034      	b.n	80021c4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff f82e 	bl	80011d0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3308      	adds	r3, #8
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 f824 	bl	80021cc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	461a      	mov	r2, r3
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	f000 f86e 	bl	8002270 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6858      	ldr	r0, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	f000 f8a3 	bl	80022ec <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	6892      	ldr	r2, [r2, #8]
 80021ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6892      	ldr	r2, [r2, #8]
 80021ba:	f041 0101 	orr.w	r1, r1, #1
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <FSMC_NORSRAM_Init+0xa0>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80021f6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80021fc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8002202:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8002208:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800220e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8002214:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800221a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8002220:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8002226:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800222c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8002232:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8002238:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d103      	bne.n	8002250 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	fff00080 	.word	0xfff00080

08002270 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002292:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800229e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80022a6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80022ae:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80022b8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	3b02      	subs	r3, #2
 80022c0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80022c2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80022c8:	4313      	orrs	r3, r2
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6979      	ldr	r1, [r7, #20]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002304:	d122      	bne.n	800234c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002322:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800232a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8002332:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002338:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800234a:	e005      	b.n	8002358 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	cff00000 	.word	0xcff00000

0800236c <__libc_init_array>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4e0d      	ldr	r6, [pc, #52]	; (80023a4 <__libc_init_array+0x38>)
 8002370:	4c0d      	ldr	r4, [pc, #52]	; (80023a8 <__libc_init_array+0x3c>)
 8002372:	1ba4      	subs	r4, r4, r6
 8002374:	10a4      	asrs	r4, r4, #2
 8002376:	2500      	movs	r5, #0
 8002378:	42a5      	cmp	r5, r4
 800237a:	d109      	bne.n	8002390 <__libc_init_array+0x24>
 800237c:	4e0b      	ldr	r6, [pc, #44]	; (80023ac <__libc_init_array+0x40>)
 800237e:	4c0c      	ldr	r4, [pc, #48]	; (80023b0 <__libc_init_array+0x44>)
 8002380:	f000 f820 	bl	80023c4 <_init>
 8002384:	1ba4      	subs	r4, r4, r6
 8002386:	10a4      	asrs	r4, r4, #2
 8002388:	2500      	movs	r5, #0
 800238a:	42a5      	cmp	r5, r4
 800238c:	d105      	bne.n	800239a <__libc_init_array+0x2e>
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002394:	4798      	blx	r3
 8002396:	3501      	adds	r5, #1
 8002398:	e7ee      	b.n	8002378 <__libc_init_array+0xc>
 800239a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800239e:	4798      	blx	r3
 80023a0:	3501      	adds	r5, #1
 80023a2:	e7f2      	b.n	800238a <__libc_init_array+0x1e>
 80023a4:	080026ec 	.word	0x080026ec
 80023a8:	080026ec 	.word	0x080026ec
 80023ac:	080026ec 	.word	0x080026ec
 80023b0:	080026f0 	.word	0x080026f0

080023b4 <memset>:
 80023b4:	4402      	add	r2, r0
 80023b6:	4603      	mov	r3, r0
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d100      	bne.n	80023be <memset+0xa>
 80023bc:	4770      	bx	lr
 80023be:	f803 1b01 	strb.w	r1, [r3], #1
 80023c2:	e7f9      	b.n	80023b8 <memset+0x4>

080023c4 <_init>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	bf00      	nop
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr

080023d0 <_fini>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr
