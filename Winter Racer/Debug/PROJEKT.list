
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002364  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024fc  080024fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002504  08002504  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08002518  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08002518  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005758  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001306  00000000  00000000  00025794  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000530  00000000  00000000  00026aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000488  00000000  00000000  00026fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fc13  00000000  00000000  00027458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000057e7  00000000  00000000  0004706b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf5cd  00000000  00000000  0004c852  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010be1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001504  00000000  00000000  0010be9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024d4 	.word	0x080024d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024d4 	.word	0x080024d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b972 	b.w	8000d70 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	9e08      	ldr	r6, [sp, #32]
 8000aaa:	4604      	mov	r4, r0
 8000aac:	4688      	mov	r8, r1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d14b      	bne.n	8000b4a <__udivmoddi4+0xa6>
 8000ab2:	428a      	cmp	r2, r1
 8000ab4:	4615      	mov	r5, r2
 8000ab6:	d967      	bls.n	8000b88 <__udivmoddi4+0xe4>
 8000ab8:	fab2 f282 	clz	r2, r2
 8000abc:	b14a      	cbz	r2, 8000ad2 <__udivmoddi4+0x2e>
 8000abe:	f1c2 0720 	rsb	r7, r2, #32
 8000ac2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ac6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aca:	4095      	lsls	r5, r2
 8000acc:	ea47 0803 	orr.w	r8, r7, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000adc:	fa1f fc85 	uxth.w	ip, r5
 8000ae0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ae4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae8:	fb07 f10c 	mul.w	r1, r7, ip
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d909      	bls.n	8000b04 <__udivmoddi4+0x60>
 8000af0:	18eb      	adds	r3, r5, r3
 8000af2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000af6:	f080 811b 	bcs.w	8000d30 <__udivmoddi4+0x28c>
 8000afa:	4299      	cmp	r1, r3
 8000afc:	f240 8118 	bls.w	8000d30 <__udivmoddi4+0x28c>
 8000b00:	3f02      	subs	r7, #2
 8000b02:	442b      	add	r3, r5
 8000b04:	1a5b      	subs	r3, r3, r1
 8000b06:	b2a4      	uxth	r4, r4
 8000b08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b18:	45a4      	cmp	ip, r4
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x8c>
 8000b1c:	192c      	adds	r4, r5, r4
 8000b1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b22:	f080 8107 	bcs.w	8000d34 <__udivmoddi4+0x290>
 8000b26:	45a4      	cmp	ip, r4
 8000b28:	f240 8104 	bls.w	8000d34 <__udivmoddi4+0x290>
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	442c      	add	r4, r5
 8000b30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b34:	eba4 040c 	sub.w	r4, r4, ip
 8000b38:	2700      	movs	r7, #0
 8000b3a:	b11e      	cbz	r6, 8000b44 <__udivmoddi4+0xa0>
 8000b3c:	40d4      	lsrs	r4, r2
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e9c6 4300 	strd	r4, r3, [r6]
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0xbe>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	f000 80eb 	beq.w	8000d2a <__udivmoddi4+0x286>
 8000b54:	2700      	movs	r7, #0
 8000b56:	e9c6 0100 	strd	r0, r1, [r6]
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f783 	clz	r7, r3
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	d147      	bne.n	8000bfa <__udivmoddi4+0x156>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xd0>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80fa 	bhi.w	8000d68 <__udivmoddi4+0x2c4>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0303 	sbc.w	r3, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0e0      	beq.n	8000b44 <__udivmoddi4+0xa0>
 8000b82:	e9c6 4800 	strd	r4, r8, [r6]
 8000b86:	e7dd      	b.n	8000b44 <__udivmoddi4+0xa0>
 8000b88:	b902      	cbnz	r2, 8000b8c <__udivmoddi4+0xe8>
 8000b8a:	deff      	udf	#255	; 0xff
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	f040 808f 	bne.w	8000cb4 <__udivmoddi4+0x210>
 8000b96:	1b49      	subs	r1, r1, r5
 8000b98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9c:	fa1f f885 	uxth.w	r8, r5
 8000ba0:	2701      	movs	r7, #1
 8000ba2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x124>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x122>
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2bc>
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	1a59      	subs	r1, r3, r1
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd8:	fb08 f800 	mul.w	r8, r8, r0
 8000bdc:	45a0      	cmp	r8, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x14c>
 8000be0:	192c      	adds	r4, r5, r4
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x14a>
 8000be8:	45a0      	cmp	r8, r4
 8000bea:	f200 80b6 	bhi.w	8000d5a <__udivmoddi4+0x2b6>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 0408 	sub.w	r4, r4, r8
 8000bf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf8:	e79f      	b.n	8000b3a <__udivmoddi4+0x96>
 8000bfa:	f1c7 0c20 	rsb	ip, r7, #32
 8000bfe:	40bb      	lsls	r3, r7
 8000c00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c08:	fa01 f407 	lsl.w	r4, r1, r7
 8000c0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c18:	4325      	orrs	r5, r4
 8000c1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c1e:	0c2c      	lsrs	r4, r5, #16
 8000c20:	fb08 3319 	mls	r3, r8, r9, r3
 8000c24:	fa1f fa8e 	uxth.w	sl, lr
 8000c28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c30:	429c      	cmp	r4, r3
 8000c32:	fa02 f207 	lsl.w	r2, r2, r7
 8000c36:	fa00 f107 	lsl.w	r1, r0, r7
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b0>
 8000c3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c44:	f080 8087 	bcs.w	8000d56 <__udivmoddi4+0x2b2>
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	f240 8084 	bls.w	8000d56 <__udivmoddi4+0x2b2>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4473      	add	r3, lr
 8000c54:	1b1b      	subs	r3, r3, r4
 8000c56:	b2ad      	uxth	r5, r5
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c68:	45a2      	cmp	sl, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1da>
 8000c6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c74:	d26b      	bcs.n	8000d4e <__udivmoddi4+0x2aa>
 8000c76:	45a2      	cmp	sl, r4
 8000c78:	d969      	bls.n	8000d4e <__udivmoddi4+0x2aa>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4474      	add	r4, lr
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	fba0 8902 	umull	r8, r9, r0, r2
 8000c86:	eba4 040a 	sub.w	r4, r4, sl
 8000c8a:	454c      	cmp	r4, r9
 8000c8c:	46c2      	mov	sl, r8
 8000c8e:	464b      	mov	r3, r9
 8000c90:	d354      	bcc.n	8000d3c <__udivmoddi4+0x298>
 8000c92:	d051      	beq.n	8000d38 <__udivmoddi4+0x294>
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d069      	beq.n	8000d6c <__udivmoddi4+0x2c8>
 8000c98:	ebb1 050a 	subs.w	r5, r1, sl
 8000c9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ca4:	40fd      	lsrs	r5, r7
 8000ca6:	40fc      	lsrs	r4, r7
 8000ca8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cac:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	e747      	b.n	8000b44 <__udivmoddi4+0xa0>
 8000cb4:	f1c2 0320 	rsb	r3, r2, #32
 8000cb8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cbc:	4095      	lsls	r5, r2
 8000cbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	4338      	orrs	r0, r7
 8000ccc:	0c01      	lsrs	r1, r0, #16
 8000cce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cd2:	fa1f f885 	uxth.w	r8, r5
 8000cd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb07 f308 	mul.w	r3, r7, r8
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x256>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf0:	d22f      	bcs.n	8000d52 <__udivmoddi4+0x2ae>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d92d      	bls.n	8000d52 <__udivmoddi4+0x2ae>
 8000cf6:	3f02      	subs	r7, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1acb      	subs	r3, r1, r3
 8000cfc:	b281      	uxth	r1, r0
 8000cfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d02:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0a:	fb00 f308 	mul.w	r3, r0, r8
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x27e>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d18:	d217      	bcs.n	8000d4a <__udivmoddi4+0x2a6>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d915      	bls.n	8000d4a <__udivmoddi4+0x2a6>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1ac9      	subs	r1, r1, r3
 8000d24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d28:	e73b      	b.n	8000ba2 <__udivmoddi4+0xfe>
 8000d2a:	4637      	mov	r7, r6
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	e709      	b.n	8000b44 <__udivmoddi4+0xa0>
 8000d30:	4607      	mov	r7, r0
 8000d32:	e6e7      	b.n	8000b04 <__udivmoddi4+0x60>
 8000d34:	4618      	mov	r0, r3
 8000d36:	e6fb      	b.n	8000b30 <__udivmoddi4+0x8c>
 8000d38:	4541      	cmp	r1, r8
 8000d3a:	d2ab      	bcs.n	8000c94 <__udivmoddi4+0x1f0>
 8000d3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d40:	eb69 020e 	sbc.w	r2, r9, lr
 8000d44:	3801      	subs	r0, #1
 8000d46:	4613      	mov	r3, r2
 8000d48:	e7a4      	b.n	8000c94 <__udivmoddi4+0x1f0>
 8000d4a:	4660      	mov	r0, ip
 8000d4c:	e7e9      	b.n	8000d22 <__udivmoddi4+0x27e>
 8000d4e:	4618      	mov	r0, r3
 8000d50:	e795      	b.n	8000c7e <__udivmoddi4+0x1da>
 8000d52:	4667      	mov	r7, ip
 8000d54:	e7d1      	b.n	8000cfa <__udivmoddi4+0x256>
 8000d56:	4681      	mov	r9, r0
 8000d58:	e77c      	b.n	8000c54 <__udivmoddi4+0x1b0>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	442c      	add	r4, r5
 8000d5e:	e747      	b.n	8000bf0 <__udivmoddi4+0x14c>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	442b      	add	r3, r5
 8000d66:	e72f      	b.n	8000bc8 <__udivmoddi4+0x124>
 8000d68:	4638      	mov	r0, r7
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xda>
 8000d6c:	4637      	mov	r7, r6
 8000d6e:	e6e9      	b.n	8000b44 <__udivmoddi4+0xa0>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f90d 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f001 fa88 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f917 	bl	800100a <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f8ed 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000028 	.word	0x20000028

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000028 	.word	0x20000028

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff47 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff5c 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffb0 	bl	8000f78 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	4013      	ands	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e001      	b.n	8001044 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e25b      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d075      	beq.n	800115e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001072:	4ba3      	ldr	r3, [pc, #652]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00c      	beq.n	8001098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	2b08      	cmp	r3, #8
 8001088:	d112      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b9d      	ldr	r3, [pc, #628]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001096:	d10b      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	4b99      	ldr	r3, [pc, #612]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05b      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d157      	bne.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e236      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x74>
 80010ba:	4b91      	ldr	r3, [pc, #580]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a90      	ldr	r2, [pc, #576]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e01d      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x98>
 80010d2:	4b8b      	ldr	r3, [pc, #556]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a8a      	ldr	r2, [pc, #552]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b88      	ldr	r3, [pc, #544]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a87      	ldr	r2, [pc, #540]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010ec:	4b84      	ldr	r3, [pc, #528]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a83      	ldr	r2, [pc, #524]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b81      	ldr	r3, [pc, #516]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a80      	ldr	r2, [pc, #512]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fe98 	bl	8000e40 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fe94 	bl	8000e40 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1fb      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xc0>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fe84 	bl	8000e40 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fe80 	bl	8000e40 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1e7      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d063      	beq.n	8001232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b62      	ldr	r3, [pc, #392]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	2b08      	cmp	r3, #8
 8001180:	d11c      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d116      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1bb      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4952      	ldr	r1, [pc, #328]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e03a      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_RCC_OscConfig+0x2b0>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fe39 	bl	8000e40 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fe35 	bl	8000e40 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e19c      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b43      	ldr	r3, [pc, #268]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4940      	ldr	r1, [pc, #256]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001206:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <HAL_RCC_OscConfig+0x2b0>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fe18 	bl	8000e40 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fe14 	bl	8000e40 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e17b      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d030      	beq.n	80012a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_OscConfig+0x2b4>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fdf8 	bl	8000e40 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fdf4 	bl	8000e40 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e15b      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x200>
 8001272:	e015      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_OscConfig+0x2b4>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fde1 	bl	8000e40 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fddd 	bl	8000e40 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e144      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a0 	beq.w	80013ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x2b8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d121      	bne.n	800132e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_RCC_OscConfig+0x2b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_RCC_OscConfig+0x2b8>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fda3 	bl	8000e40 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	e011      	b.n	8001322 <HAL_RCC_OscConfig+0x2ce>
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	42470000 	.word	0x42470000
 8001308:	42470e80 	.word	0x42470e80
 800130c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff fd96 	bl	8000e40 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0fd      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x4d4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x2f0>
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a7c      	ldr	r2, [pc, #496]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x32a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x312>
 800134c:	4b77      	ldr	r3, [pc, #476]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a76      	ldr	r2, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	4b74      	ldr	r3, [pc, #464]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	4a73      	ldr	r2, [pc, #460]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	; 0x70
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x32a>
 8001366:	4b71      	ldr	r3, [pc, #452]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a70      	ldr	r2, [pc, #448]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	4b6e      	ldr	r3, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a6d      	ldr	r2, [pc, #436]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fd5b 	bl	8000e40 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fd57 	bl	8000e40 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	; 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0bc      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ee      	beq.n	800138e <HAL_RCC_OscConfig+0x33a>
 80013b0:	e014      	b.n	80013dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fd45 	bl	8000e40 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fd41 	bl	8000e40 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0a6      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b52      	ldr	r3, [pc, #328]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a51      	ldr	r2, [pc, #324]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8092 	beq.w	800151c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f8:	4b4c      	ldr	r3, [pc, #304]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d05c      	beq.n	80014be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d141      	bne.n	8001490 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fd15 	bl	8000e40 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fd11 	bl	8000e40 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e078      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	019b      	lsls	r3, r3, #6
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	3b01      	subs	r3, #1
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	4933      	ldr	r1, [pc, #204]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fcea 	bl	8000e40 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fce6 	bl	8000e40 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e04d      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x41c>
 800148e:	e045      	b.n	800151c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fcd3 	bl	8000e40 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fccf 	bl	8000e40 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e036      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x44a>
 80014bc:	e02e      	b.n	800151c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e029      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d115      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d10d      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000
 800152c:	40023800 	.word	0x40023800
 8001530:	42470060 	.word	0x42470060

08001534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0cc      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d90c      	bls.n	8001570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d044      	beq.n	8001654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d119      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e067      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4934      	ldr	r1, [pc, #208]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001624:	f7ff fc0c 	bl	8000e40 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff fc08 	bl	8000e40 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d20c      	bcs.n	800167c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4601      	mov	r1, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	fa21 f303 	lsr.w	r3, r1, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fb6c 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	080024ec 	.word	0x080024ec
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000000 	.word	0x20000000

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d007      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x32>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d008      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x38>
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80b4 	bne.w	8001894 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800172e:	60bb      	str	r3, [r7, #8]
       break;
 8001730:	e0b3      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001732:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001734:	60bb      	str	r3, [r7, #8]
      break;
 8001736:	e0b0      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001742:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d04a      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	ea03 0501 	and.w	r5, r3, r1
 8001764:	ea04 0602 	and.w	r6, r4, r2
 8001768:	4629      	mov	r1, r5
 800176a:	4632      	mov	r2, r6
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f04f 0400 	mov.w	r4, #0
 8001774:	0154      	lsls	r4, r2, #5
 8001776:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800177a:	014b      	lsls	r3, r1, #5
 800177c:	4619      	mov	r1, r3
 800177e:	4622      	mov	r2, r4
 8001780:	1b49      	subs	r1, r1, r5
 8001782:	eb62 0206 	sbc.w	r2, r2, r6
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	0194      	lsls	r4, r2, #6
 8001790:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001794:	018b      	lsls	r3, r1, #6
 8001796:	1a5b      	subs	r3, r3, r1
 8001798:	eb64 0402 	sbc.w	r4, r4, r2
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	00e2      	lsls	r2, r4, #3
 80017a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017aa:	00d9      	lsls	r1, r3, #3
 80017ac:	460b      	mov	r3, r1
 80017ae:	4614      	mov	r4, r2
 80017b0:	195b      	adds	r3, r3, r5
 80017b2:	eb44 0406 	adc.w	r4, r4, r6
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	0262      	lsls	r2, r4, #9
 80017c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017c4:	0259      	lsls	r1, r3, #9
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	f7ff f94c 	bl	8000a74 <__aeabi_uldivmod>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e049      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	ea03 0501 	and.w	r5, r3, r1
 80017fa:	ea04 0602 	and.w	r6, r4, r2
 80017fe:	4629      	mov	r1, r5
 8001800:	4632      	mov	r2, r6
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	0154      	lsls	r4, r2, #5
 800180c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001810:	014b      	lsls	r3, r1, #5
 8001812:	4619      	mov	r1, r3
 8001814:	4622      	mov	r2, r4
 8001816:	1b49      	subs	r1, r1, r5
 8001818:	eb62 0206 	sbc.w	r2, r2, r6
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	0194      	lsls	r4, r2, #6
 8001826:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800182a:	018b      	lsls	r3, r1, #6
 800182c:	1a5b      	subs	r3, r3, r1
 800182e:	eb64 0402 	sbc.w	r4, r4, r2
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	00e2      	lsls	r2, r4, #3
 800183c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001840:	00d9      	lsls	r1, r3, #3
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	195b      	adds	r3, r3, r5
 8001848:	eb44 0406 	adc.w	r4, r4, r6
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	02a2      	lsls	r2, r4, #10
 8001856:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800185a:	0299      	lsls	r1, r3, #10
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	4618      	mov	r0, r3
 8001862:	4621      	mov	r1, r4
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	f7ff f901 	bl	8000a74 <__aeabi_uldivmod>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	60bb      	str	r3, [r7, #8]
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001896:	60bb      	str	r3, [r7, #8]
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	68bb      	ldr	r3, [r7, #8]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	007a1200 	.word	0x007a1200

080018b0 <DrawBox>:
//NOTE
	//Dodac napisy do DrawMenu, ChangeTarget i ShowRanking

//***DrawBox
void DrawBox(uint16_t X, uint16_t Y, uint16_t width, uint16_t height, uint16_t border, uint16_t color)
{
 80018b0:	b490      	push	{r4, r7}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	for(int i=0; i<border; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e002      	b.n	80018da <DrawBox+0x2a>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	8b3b      	ldrh	r3, [r7, #24]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbf8      	blt.n	80018d4 <DrawBox+0x24>
		//LCD_DrawLine(X, Y-i, X+(width-1), Y-i, color);
		//LCD_DrawLine(X+i, Y-border, X+i, Y-height+border+1, color);
		//LCD_DrawLine(X, Y-height+1+i, X+(width-1), Y-height+1+i, color);
		//LCD_DrawLine(X+(width-1)-i, Y-border, X+(width-1)-i, Y-height+border+1, color);
	}
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc90      	pop	{r4, r7}
 80018ea:	4770      	bx	lr

080018ec <FillInside>:

//***FillInside

void FillInside(uint16_t X, uint16_t Y, uint16_t width, uint16_t height, uint16_t border, uint16_t color)
{
 80018ec:	b490      	push	{r4, r7}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	4603      	mov	r3, r0
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	807b      	strh	r3, [r7, #2]
 8001906:	4613      	mov	r3, r2
 8001908:	803b      	strh	r3, [r7, #0]
	X=X+border;
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	8c3b      	ldrh	r3, [r7, #32]
 800190e:	4413      	add	r3, r2
 8001910:	80fb      	strh	r3, [r7, #6]
	Y=Y-border;
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	8c3b      	ldrh	r3, [r7, #32]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	80bb      	strh	r3, [r7, #4]

	uint16_t Xp=X+(width-1)-border;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	4413      	add	r3, r2
 8001920:	b29a      	uxth	r2, r3
 8001922:	8c3b      	ldrh	r3, [r7, #32]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	81fb      	strh	r3, [r7, #14]
	uint16_t Yp=Y-(height-1)+border;
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b29a      	uxth	r2, r3
 8001934:	8c3b      	ldrh	r3, [r7, #32]
 8001936:	4413      	add	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	81bb      	strh	r3, [r7, #12]

	for(int i=X; i<=Xp; i++)
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e00c      	b.n	800195e <FillInside+0x72>
		for(int j=Y; j<=Yp; j++)
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e002      	b.n	8001950 <FillInside+0x64>
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	3301      	adds	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	89bb      	ldrh	r3, [r7, #12]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	ddf8      	ble.n	800194a <FillInside+0x5e>
	for(int i=X; i<=Xp; i++)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	429a      	cmp	r2, r3
 8001964:	ddee      	ble.n	8001944 <FillInside+0x58>
		{
			//LCD_SetPoint(i, j,0x0000);
		}
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bc90      	pop	{r4, r7}
 800196e:	4770      	bx	lr

08001970 <DrawMenu>:

//***MENU
void DrawMenu(uint8_t Mode)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	if(Mode==-1)	//-1 rysuje całe menu
	{
		LCD_Clear(1567);
		//GUI_Text(120, 220, uint8_t *str,49149, 1567); //WINTER RACER
	}
	if(Mode==-1 || Mode==0)
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <DrawMenu+0x26>
	{
		DrawBox(86,190,150,40,3,65535);	//START
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	2303      	movs	r3, #3
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2328      	movs	r3, #40	; 0x28
 800198c:	2296      	movs	r2, #150	; 0x96
 800198e:	21be      	movs	r1, #190	; 0xbe
 8001990:	2056      	movs	r0, #86	; 0x56
 8001992:	f7ff ff8d 	bl	80018b0 <DrawBox>
		//GUI_Text(147, 176, uint8_t *str,65535, 1567);
	}
	if(Mode==-1 || Mode==1)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10a      	bne.n	80019b2 <DrawMenu+0x42>
	{
		DrawBox(86,140,150,40,3,65535);	//RANKING
 800199c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2303      	movs	r3, #3
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2328      	movs	r3, #40	; 0x28
 80019a8:	2296      	movs	r2, #150	; 0x96
 80019aa:	218c      	movs	r1, #140	; 0x8c
 80019ac:	2056      	movs	r0, #86	; 0x56
 80019ae:	f7ff ff7f 	bl	80018b0 <DrawBox>
		//GUI_Text(147, 126, uint8_t *str,65535, 1567);
	}
	if(Mode==-1 || Mode==2)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d10a      	bne.n	80019ce <DrawMenu+0x5e>
	{
		DrawBox(86,90,150,40,3,65535);		//WYJŚCIE
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2303      	movs	r3, #3
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2328      	movs	r3, #40	; 0x28
 80019c4:	2296      	movs	r2, #150	; 0x96
 80019c6:	215a      	movs	r1, #90	; 0x5a
 80019c8:	2056      	movs	r0, #86	; 0x56
 80019ca:	f7ff ff71 	bl	80018b0 <DrawBox>
		//GUI_Text(147, 76, uint8_t *str,65535, 1567);
	}
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <ChangeTargetMenu>:

void ChangeTargetMenu(uint8_t option, uint8_t LastOption)
{	
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af02      	add	r7, sp, #8
 80019dc:	4603      	mov	r3, r0
 80019de:	460a      	mov	r2, r1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71bb      	strb	r3, [r7, #6]
	DrawMenu(LastOption);
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ffc1 	bl	8001970 <DrawMenu>
	
	switch(option)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d010      	beq.n	8001a16 <ChangeTargetMenu+0x40>
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d01a      	beq.n	8001a2e <ChangeTargetMenu+0x58>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d000      	beq.n	80019fe <ChangeTargetMenu+0x28>
		case 2:
		DrawBox(86,90,150,40,3,65535);		//WYJŚCIE
		//GUI_Text(147, 76, uint8_t *str,49149, 1567);
		break;
	}
}
 80019fc:	e023      	b.n	8001a46 <ChangeTargetMenu+0x70>
		DrawBox(86,190,150,40,3,49149);	//START
 80019fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2303      	movs	r3, #3
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2328      	movs	r3, #40	; 0x28
 8001a0a:	2296      	movs	r2, #150	; 0x96
 8001a0c:	21be      	movs	r1, #190	; 0xbe
 8001a0e:	2056      	movs	r0, #86	; 0x56
 8001a10:	f7ff ff4e 	bl	80018b0 <DrawBox>
		break;
 8001a14:	e017      	b.n	8001a46 <ChangeTargetMenu+0x70>
		DrawBox(86,140,150,40,3,65535);	//RANKING
 8001a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2328      	movs	r3, #40	; 0x28
 8001a22:	2296      	movs	r2, #150	; 0x96
 8001a24:	218c      	movs	r1, #140	; 0x8c
 8001a26:	2056      	movs	r0, #86	; 0x56
 8001a28:	f7ff ff42 	bl	80018b0 <DrawBox>
		break;
 8001a2c:	e00b      	b.n	8001a46 <ChangeTargetMenu+0x70>
		DrawBox(86,90,150,40,3,65535);		//WYJŚCIE
 8001a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2303      	movs	r3, #3
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2328      	movs	r3, #40	; 0x28
 8001a3a:	2296      	movs	r2, #150	; 0x96
 8001a3c:	215a      	movs	r1, #90	; 0x5a
 8001a3e:	2056      	movs	r0, #86	; 0x56
 8001a40:	f7ff ff36 	bl	80018b0 <DrawBox>
		break;
 8001a44:	bf00      	nop
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <StartGame>:

void StartGame()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0

	while(1)
	{
		//sprawdza wychylenie w osi X
		//LIS3DSH_ReadACC(out);
		accX = out[0];
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <StartGame+0x40>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <StartGame+0x44>)
 8001a5c:	6013      	str	r3, [r2, #0]
			
		speedUpdate(s1.speed);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fa2d 	bl	8001ec0 <speedUpdate>
		positionUpdate(accX, s1.speed, s1.X, s1.Y);
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <StartGame+0x44>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	ee07 3a10 	vmov	s14, r3
 8001a72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	eef0 0a47 	vmov.f32	s1, s14
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f000 f95c 	bl	8001d44 <positionUpdate>
		accX = out[0];
 8001a8c:	e7e3      	b.n	8001a56 <StartGame+0x6>
 8001a8e:	bf00      	nop
 8001a90:	2000002c 	.word	0x2000002c
 8001a94:	2000003c 	.word	0x2000003c

08001a98 <DrawRanking>:
	}
}

//***RANKING
void DrawRanking(uint8_t Mode)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	if(Mode==-1)
	{
		LCD_Clear(0x070F);
		//GUI_Text(130, 220, uint8_t *str,49149, 0xFFFF); //RANKING
	}
	if(Mode==-1 || Mode==0)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d115      	bne.n	8001ad4 <DrawRanking+0x3c>
	{
		FillInside(41, 190, 240, 140, 5, 0x05AC);
 8001aa8:	f240 53ac 	movw	r3, #1452	; 0x5ac
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2305      	movs	r3, #5
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	238c      	movs	r3, #140	; 0x8c
 8001ab4:	22f0      	movs	r2, #240	; 0xf0
 8001ab6:	21be      	movs	r1, #190	; 0xbe
 8001ab8:	2029      	movs	r0, #41	; 0x29
 8001aba:	f7ff ff17 	bl	80018ec <FillInside>
		DrawBox(133, 43, 60, 35, 3, 0x0347);
 8001abe:	f240 3347 	movw	r3, #839	; 0x347
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2323      	movs	r3, #35	; 0x23
 8001aca:	223c      	movs	r2, #60	; 0x3c
 8001acc:	212b      	movs	r1, #43	; 0x2b
 8001ace:	2085      	movs	r0, #133	; 0x85
 8001ad0:	f7ff feee 	bl	80018b0 <DrawBox>
		//GUI_Text(140, 60, uint8_t *str,49149, 0xFFFF); //WSTECZ
	}
	if(Mode==-1 || Mode==1)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d115      	bne.n	8001b06 <DrawRanking+0x6e>
	{
		FillInside(41, 190, 240, 140, 5, 0xC638);
 8001ada:	f24c 6338 	movw	r3, #50744	; 0xc638
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	238c      	movs	r3, #140	; 0x8c
 8001ae6:	22f0      	movs	r2, #240	; 0xf0
 8001ae8:	21be      	movs	r1, #190	; 0xbe
 8001aea:	2029      	movs	r0, #41	; 0x29
 8001aec:	f7ff fefe 	bl	80018ec <FillInside>
		DrawBox(41, 190, 240, 140, 5, 0x05AC);
 8001af0:	f240 53ac 	movw	r3, #1452	; 0x5ac
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	2305      	movs	r3, #5
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	238c      	movs	r3, #140	; 0x8c
 8001afc:	22f0      	movs	r2, #240	; 0xf0
 8001afe:	21be      	movs	r1, #190	; 0xbe
 8001b00:	2029      	movs	r0, #41	; 0x29
 8001b02:	f7ff fed5 	bl	80018b0 <DrawBox>
	}
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <ChangeTargetRanking>:

void ChangeTargetRanking(uint8_t option, uint8_t LastOption)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af02      	add	r7, sp, #8
 8001b14:	4603      	mov	r3, r0
 8001b16:	460a      	mov	r2, r1
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	71bb      	strb	r3, [r7, #6]
	DrawRanking(LastOption);
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ffb9 	bl	8001a98 <DrawRanking>
	
	switch(option)
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <ChangeTargetRanking+0x24>
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00c      	beq.n	8001b4a <ChangeTargetRanking+0x3c>
		break;
		case 1:
		DrawBox(41, 190, 240, 140, 5, 0x6FF7);	//RANKING
		break;
	}
}
 8001b30:	e017      	b.n	8001b62 <ChangeTargetRanking+0x54>
		DrawBox(133, 43, 60, 35, 3, 0x6FF7); //WSTECZ
 8001b32:	f646 73f7 	movw	r3, #28663	; 0x6ff7
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2303      	movs	r3, #3
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2323      	movs	r3, #35	; 0x23
 8001b3e:	223c      	movs	r2, #60	; 0x3c
 8001b40:	212b      	movs	r1, #43	; 0x2b
 8001b42:	2085      	movs	r0, #133	; 0x85
 8001b44:	f7ff feb4 	bl	80018b0 <DrawBox>
		break;
 8001b48:	e00b      	b.n	8001b62 <ChangeTargetRanking+0x54>
		DrawBox(41, 190, 240, 140, 5, 0x6FF7);	//RANKING
 8001b4a:	f646 73f7 	movw	r3, #28663	; 0x6ff7
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2305      	movs	r3, #5
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	238c      	movs	r3, #140	; 0x8c
 8001b56:	22f0      	movs	r2, #240	; 0xf0
 8001b58:	21be      	movs	r1, #190	; 0xbe
 8001b5a:	2029      	movs	r0, #41	; 0x29
 8001b5c:	f7ff fea8 	bl	80018b0 <DrawBox>
		break;
 8001b60:	bf00      	nop
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <UseRanking>:

void UseRanking()
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
	int option=0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
	
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && option!=0)
 8001b76:	2102      	movs	r1, #2
 8001b78:	4829      	ldr	r0, [pc, #164]	; (8001c20 <UseRanking+0xb4>)
 8001b7a:	f7ff fa52 	bl	8001022 <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <UseRanking+0x40>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d010      	beq.n	8001bac <UseRanking+0x40>
		{
			Sound(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f000 f84a 	bl	8001c24 <Sound>
			option--;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
			ChangeTargetRanking(option, option+1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f7ff ffb2 	bl	8001b0e <ChangeTargetRanking>
 8001baa:	e02f      	b.n	8001c0c <UseRanking+0xa0>
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) && option!=1)
 8001bac:	2104      	movs	r1, #4
 8001bae:	481c      	ldr	r0, [pc, #112]	; (8001c20 <UseRanking+0xb4>)
 8001bb0:	f7ff fa37 	bl	8001022 <HAL_GPIO_ReadPin>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d013      	beq.n	8001be2 <UseRanking+0x76>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d010      	beq.n	8001be2 <UseRanking+0x76>
		{
			Sound(1);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f000 f82f 	bl	8001c24 <Sound>
			option++;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
			ChangeTargetRanking(option, option-1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7ff ff97 	bl	8001b0e <ChangeTargetRanking>
 8001be0:	e014      	b.n	8001c0c <UseRanking+0xa0>
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8001be2:	2108      	movs	r1, #8
 8001be4:	480e      	ldr	r0, [pc, #56]	; (8001c20 <UseRanking+0xb4>)
 8001be6:	f7ff fa1c 	bl	8001022 <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00d      	beq.n	8001c0c <UseRanking+0xa0>
		{
			Sound(1);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f000 f817 	bl	8001c24 <Sound>
			switch(option)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <UseRanking+0x94>
 8001bfc:	2b01      	cmp	r3, #1
				DrawMenu(-1);
				option=3;
				break;
				case 1:

				break;
 8001bfe:	e005      	b.n	8001c0c <UseRanking+0xa0>
				DrawMenu(-1);
 8001c00:	20ff      	movs	r0, #255	; 0xff
 8001c02:	f7ff feb5 	bl	8001970 <DrawMenu>
				option=3;
 8001c06:	2303      	movs	r3, #3
 8001c08:	607b      	str	r3, [r7, #4]
				break;
 8001c0a:	bf00      	nop
			}
		}
		if(option==3) break;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d000      	beq.n	8001c14 <UseRanking+0xa8>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && option!=0)
 8001c12:	e7b0      	b.n	8001b76 <UseRanking+0xa>
		if(option==3) break;
 8001c14:	bf00      	nop
	}
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020000 	.word	0x40020000

08001c24 <Sound>:

//***Sound
void Sound(uint8_t option)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	switch(option)
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d80f      	bhi.n	8001c56 <Sound+0x32>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <Sound+0x18>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c55 	.word	0x08001c55
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001c55 	.word	0x08001c55
 8001c4c:	08001c55 	.word	0x08001c55
 8001c50:	08001c55 	.word	0x08001c55
	{
	case 1:
		break;
 8001c54:	bf00      	nop
	case 5:
		break;
	case 6:
		break;
	}
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <UseMenu>:

void UseMenu()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
	int option=0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
	
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && option!=0)
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4828      	ldr	r0, [pc, #160]	; (8001d14 <UseMenu+0xb0>)
 8001c72:	f7ff f9d6 	bl	8001022 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <UseMenu+0x40>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <UseMenu+0x40>
		{
			Sound(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff ffce 	bl	8001c24 <Sound>
			option--;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
			ChangeTargetMenu(option, option+1);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff fe9a 	bl	80019d6 <ChangeTargetMenu>
 8001ca2:	e035      	b.n	8001d10 <UseMenu+0xac>
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) && option!=2)
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	481b      	ldr	r0, [pc, #108]	; (8001d14 <UseMenu+0xb0>)
 8001ca8:	f7ff f9bb 	bl	8001022 <HAL_GPIO_ReadPin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <UseMenu+0x76>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d010      	beq.n	8001cda <UseMenu+0x76>
		{
			Sound(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff ffb3 	bl	8001c24 <Sound>
			option++;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
			ChangeTargetMenu(option, option-1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fe7f 	bl	80019d6 <ChangeTargetMenu>
 8001cd8:	e01a      	b.n	8001d10 <UseMenu+0xac>
		}
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8001cda:	2108      	movs	r1, #8
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <UseMenu+0xb0>)
 8001cde:	f7ff f9a0 	bl	8001022 <HAL_GPIO_ReadPin>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0c2      	beq.n	8001c6e <UseMenu+0xa>
		{
			Sound(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff ff9b 	bl	8001c24 <Sound>
			switch(option)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d006      	beq.n	8001d02 <UseMenu+0x9e>
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d00a      	beq.n	8001d0e <UseMenu+0xaa>
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <UseMenu+0xac>
			{
				case 0:
				StartGame();
 8001cfc:	f7ff fea8 	bl	8001a50 <StartGame>
				break;
 8001d00:	e006      	b.n	8001d10 <UseMenu+0xac>
				case 1:
				DrawRanking(-1);
 8001d02:	20ff      	movs	r0, #255	; 0xff
 8001d04:	f7ff fec8 	bl	8001a98 <DrawRanking>
				UseRanking();
 8001d08:	f7ff ff30 	bl	8001b6c <UseRanking>
				break;
 8001d0c:	e000      	b.n	8001d10 <UseMenu+0xac>
				case 2:
				//LCD_Clear(0);
				break;
 8001d0e:	bf00      	nop
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && option!=0)
 8001d10:	e7ad      	b.n	8001c6e <UseMenu+0xa>
 8001d12:	bf00      	nop
 8001d14:	40020000 	.word	0x40020000

08001d18 <drawSkier>:
	return 0;
}

//***drawSkier
void drawSkier(int position, int X, int Y)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
	switch(position)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d003      	beq.n	8001d32 <drawSkier+0x1a>
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d003      	beq.n	8001d36 <drawSkier+0x1e>
 8001d2e:	2b01      	cmp	r3, #1
	{
		case 1:
		break;
 8001d30:	e002      	b.n	8001d38 <drawSkier+0x20>
		case 2:
		break;
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <drawSkier+0x20>
		case 3:
		break;
 8001d36:	bf00      	nop
	}
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <positionUpdate>:

void positionUpdate(float accX, float speed, int *X, int *Y)
{
 8001d44:	b5b0      	push	{r4, r5, r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	*Y += speed;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6e:	ee17 2a90 	vmov	r2, s15
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]

	if(accX < 0.5)
 8001d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d541      	bpl.n	8001e0c <positionUpdate+0xc8>
	{
		for(int i=0; i<(round(abs(accX))/100); i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e01e      	b.n	8001dcc <positionUpdate+0x88>
		{
			drawSkier(1, *X, *Y);	//rysuje narciarza, 1 - pozycja narciarza skręcającego w lewo
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff ffbd 	bl	8001d18 <drawSkier>
			*X += accX/100;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001daa:	edd7 6a03 	vldr	s13, [r7, #12]
 8001dae:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8001eb8 <positionUpdate+0x174>
 8001db2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dbe:	ee17 2a90 	vmov	r2, s15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
		for(int i=0; i<(round(abs(accX))/100); i++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7fe fb4d 	bl	800046c <__aeabi_i2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dde:	ee17 3a90 	vmov	r3, s15
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bfb8      	it	lt
 8001de6:	425b      	neglt	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb3f 	bl	800046c <__aeabi_i2d>
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <positionUpdate+0x178>)
 8001df4:	f7fe fcce 	bl	8000794 <__aeabi_ddiv>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	f7fe fe10 	bl	8000a24 <__aeabi_dcmplt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1c1      	bne.n	8001d8e <positionUpdate+0x4a>
			drawSkier(2, *X, *Y);	//rysuje narciarza, 2 - pozycja narciarza skręcającego w prawo
			*X += accX/100;
		}
	}
	else drawSkier(3, *X, *Y);	//rysuje narciarza, , 3 - pozycja narciarza jadącego prosto
}
 8001e0a:	e051      	b.n	8001eb0 <positionUpdate+0x16c>
	else if(accX > 0.5)
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	dd40      	ble.n	8001ea0 <positionUpdate+0x15c>
		for(int i=0; i<(round(accX)/100); i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e01e      	b.n	8001e62 <positionUpdate+0x11e>
			drawSkier(2, *X, *Y);	//rysuje narciarza, 2 - pozycja narciarza skręcającego w prawo
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f7ff ff72 	bl	8001d18 <drawSkier>
			*X += accX/100;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e40:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e44:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001eb8 <positionUpdate+0x174>
 8001e48:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e54:	ee17 2a90 	vmov	r2, s15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
		for(int i=0; i<(round(accX)/100); i++)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	6938      	ldr	r0, [r7, #16]
 8001e64:	f7fe fb02 	bl	800046c <__aeabi_i2d>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7fe fb0f 	bl	8000490 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b10 	vmov	d0, r2, r3
 8001e7a:	f000 fae1 	bl	8002440 <round>
 8001e7e:	ec51 0b10 	vmov	r0, r1, d0
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <positionUpdate+0x178>)
 8001e88:	f7fe fc84 	bl	8000794 <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	f7fe fdc6 	bl	8000a24 <__aeabi_dcmplt>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1c2      	bne.n	8001e24 <positionUpdate+0xe0>
}
 8001e9e:	e007      	b.n	8001eb0 <positionUpdate+0x16c>
	else drawSkier(3, *X, *Y);	//rysuje narciarza, , 3 - pozycja narciarza jadącego prosto
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f7ff ff34 	bl	8001d18 <drawSkier>
}
 8001eb0:	bf00      	nop
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb8:	42c80000 	.word	0x42c80000
 8001ebc:	40590000 	.word	0x40590000

08001ec0 <speedUpdate>:

//***speedUpdate
void speedUpdate(float *speed)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <speedUpdate+0x28>)
 8001ecc:	f7ff f8a9 	bl	8001022 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <speedUpdate+0x1e>
	{
		//speed+=
	}
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <speedUpdate+0x28>)
 8001eda:	f7ff f8a2 	bl	8001022 <HAL_GPIO_ReadPin>
	{
		//speed-=
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020000 	.word	0x40020000

08001eec <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  //LCD_IO_Init();
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f936 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8001ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efc:	2001      	movs	r0, #1
 8001efe:	f000 f931 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8001f02:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001f06:	2002      	movs	r0, #2
 8001f08:	f000 f92c 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8001f0c:	f241 0118 	movw	r1, #4120	; 0x1018
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f927 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8001f16:	2100      	movs	r1, #0
 8001f18:	2004      	movs	r0, #4
 8001f1a:	f000 f923 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8001f1e:	f240 2102 	movw	r1, #514	; 0x202
 8001f22:	2008      	movs	r0, #8
 8001f24:	f000 f91e 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2009      	movs	r0, #9
 8001f2c:	f000 f91a 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8001f30:	2100      	movs	r1, #0
 8001f32:	200a      	movs	r0, #10
 8001f34:	f000 f916 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8001f38:	2100      	movs	r1, #0
 8001f3a:	200c      	movs	r0, #12
 8001f3c:	f000 f912 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8001f40:	2100      	movs	r1, #0
 8001f42:	200d      	movs	r0, #13
 8001f44:	f000 f90e 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8001f48:	2100      	movs	r1, #0
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f90a 	bl	8002164 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001f50:	2100      	movs	r1, #0
 8001f52:	2010      	movs	r0, #16
 8001f54:	f000 f906 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2011      	movs	r0, #17
 8001f5c:	f000 f902 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8001f60:	2100      	movs	r1, #0
 8001f62:	2012      	movs	r0, #18
 8001f64:	f000 f8fe 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2013      	movs	r0, #19
 8001f6c:	f000 f8fa 	bl	8002164 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001f70:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8001f74:	2010      	movs	r0, #16
 8001f76:	f000 f8f5 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001f7a:	f240 1137 	movw	r1, #311	; 0x137
 8001f7e:	2011      	movs	r0, #17
 8001f80:	f000 f8f0 	bl	8002164 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001f84:	f240 1139 	movw	r1, #313	; 0x139
 8001f88:	2012      	movs	r0, #18
 8001f8a:	f000 f8eb 	bl	8002164 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001f8e:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001f92:	2013      	movs	r0, #19
 8001f94:	f000 f8e6 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001f98:	2113      	movs	r1, #19
 8001f9a:	2029      	movs	r0, #41	; 0x29
 8001f9c:	f000 f8e2 	bl	8002164 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2020      	movs	r0, #32
 8001fa4:	f000 f8de 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2021      	movs	r0, #33	; 0x21
 8001fac:	f000 f8da 	bl	8002164 <ili9325_WriteReg>
  
  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8001fb0:	2107      	movs	r1, #7
 8001fb2:	2030      	movs	r0, #48	; 0x30
 8001fb4:	f000 f8d6 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8001fb8:	f240 3102 	movw	r1, #770	; 0x302
 8001fbc:	2031      	movs	r0, #49	; 0x31
 8001fbe:	f000 f8d1 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8001fc2:	f240 1105 	movw	r1, #261	; 0x105
 8001fc6:	2032      	movs	r0, #50	; 0x32
 8001fc8:	f000 f8cc 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8001fcc:	f240 2106 	movw	r1, #518	; 0x206
 8001fd0:	2035      	movs	r0, #53	; 0x35
 8001fd2:	f000 f8c7 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8001fd6:	f640 0108 	movw	r1, #2056	; 0x808
 8001fda:	2036      	movs	r0, #54	; 0x36
 8001fdc:	f000 f8c2 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8001fe0:	f240 2106 	movw	r1, #518	; 0x206
 8001fe4:	2037      	movs	r0, #55	; 0x37
 8001fe6:	f000 f8bd 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8001fea:	f240 5104 	movw	r1, #1284	; 0x504
 8001fee:	2038      	movs	r0, #56	; 0x38
 8001ff0:	f000 f8b8 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	2039      	movs	r0, #57	; 0x39
 8001ff8:	f000 f8b4 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8001ffc:	f240 1105 	movw	r1, #261	; 0x105
 8002000:	203c      	movs	r0, #60	; 0x3c
 8002002:	f000 f8af 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8002006:	f640 0108 	movw	r1, #2056	; 0x808
 800200a:	203d      	movs	r0, #61	; 0x3d
 800200c:	f000 f8aa 	bl	8002164 <ili9325_WriteReg>
  
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8002010:	2100      	movs	r1, #0
 8002012:	2050      	movs	r0, #80	; 0x50
 8002014:	f000 f8a6 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8002018:	21ef      	movs	r1, #239	; 0xef
 800201a:	2051      	movs	r0, #81	; 0x51
 800201c:	f000 f8a2 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8002020:	2100      	movs	r1, #0
 8002022:	2052      	movs	r0, #82	; 0x52
 8002024:	f000 f89e 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8002028:	f240 113f 	movw	r1, #319	; 0x13f
 800202c:	2053      	movs	r0, #83	; 0x53
 800202e:	f000 f899 	bl	8002164 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8002032:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8002036:	2060      	movs	r0, #96	; 0x60
 8002038:	f000 f894 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 800203c:	2101      	movs	r1, #1
 800203e:	2061      	movs	r0, #97	; 0x61
 8002040:	f000 f890 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8002044:	2100      	movs	r1, #0
 8002046:	206a      	movs	r0, #106	; 0x6a
 8002048:	f000 f88c 	bl	8002164 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 800204c:	2100      	movs	r1, #0
 800204e:	2080      	movs	r0, #128	; 0x80
 8002050:	f000 f888 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8002054:	2100      	movs	r1, #0
 8002056:	2081      	movs	r0, #129	; 0x81
 8002058:	f000 f884 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 800205c:	2100      	movs	r1, #0
 800205e:	2082      	movs	r0, #130	; 0x82
 8002060:	f000 f880 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8002064:	2100      	movs	r1, #0
 8002066:	2083      	movs	r0, #131	; 0x83
 8002068:	f000 f87c 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 800206c:	2100      	movs	r1, #0
 800206e:	2084      	movs	r0, #132	; 0x84
 8002070:	f000 f878 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8002074:	2100      	movs	r1, #0
 8002076:	2085      	movs	r0, #133	; 0x85
 8002078:	f000 f874 	bl	8002164 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 800207c:	2110      	movs	r1, #16
 800207e:	2090      	movs	r0, #144	; 0x90
 8002080:	f000 f870 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8002084:	2100      	movs	r1, #0
 8002086:	2092      	movs	r0, #146	; 0x92
 8002088:	f000 f86c 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 800208c:	2103      	movs	r1, #3
 800208e:	2093      	movs	r0, #147	; 0x93
 8002090:	f000 f868 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8002094:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002098:	2095      	movs	r0, #149	; 0x95
 800209a:	f000 f863 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 800209e:	2100      	movs	r1, #0
 80020a0:	2097      	movs	r0, #151	; 0x97
 80020a2:	f000 f85f 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 80020a6:	2100      	movs	r1, #0
 80020a8:	2098      	movs	r0, #152	; 0x98
 80020aa:	f000 f85b 	bl	8002164 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 80020ae:	f241 0118 	movw	r1, #4120	; 0x1018
 80020b2:	2003      	movs	r0, #3
 80020b4:	f000 f856 	bl	8002164 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 80020b8:	f240 1173 	movw	r1, #371	; 0x173
 80020bc:	2007      	movs	r0, #7
 80020be:	f000 f851 	bl	8002164 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 80020c2:	2100      	movs	r1, #0
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 f833 	bl	8002130 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  //LCD_IO_WriteReg(LCD_REG_34);
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}

080020ce <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80020d2:	2100      	movs	r1, #0
 80020d4:	2010      	movs	r0, #16
 80020d6:	f000 f845 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80020da:	2100      	movs	r1, #0
 80020dc:	2011      	movs	r0, #17
 80020de:	f000 f841 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80020e2:	2100      	movs	r1, #0
 80020e4:	2012      	movs	r0, #18
 80020e6:	f000 f83d 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80020ea:	2100      	movs	r1, #0
 80020ec:	2013      	movs	r0, #19
 80020ee:	f000 f839 	bl	8002164 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80020f2:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80020f6:	2010      	movs	r0, #16
 80020f8:	f000 f834 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80020fc:	f240 1137 	movw	r1, #311	; 0x137
 8002100:	2011      	movs	r0, #17
 8002102:	f000 f82f 	bl	8002164 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8002106:	f240 1139 	movw	r1, #313	; 0x139
 800210a:	2012      	movs	r0, #18
 800210c:	f000 f82a 	bl	8002164 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8002110:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002114:	2013      	movs	r0, #19
 8002116:	f000 f825 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 800211a:	2113      	movs	r1, #19
 800211c:	2029      	movs	r0, #41	; 0x29
 800211e:	f000 f821 	bl	8002164 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8002122:	f240 1173 	movw	r1, #371	; 0x173
 8002126:	2007      	movs	r0, #7
 8002128:	f000 f81c 	bl	8002164 <ili9325_WriteReg>
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	460a      	mov	r2, r1
 800213a:	80fb      	strh	r3, [r7, #6]
 800213c:	4613      	mov	r3, r2
 800213e:	80bb      	strh	r3, [r7, #4]
  ili9325_WriteReg(LCD_REG_32, Ypos);
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	4619      	mov	r1, r3
 8002144:	2020      	movs	r0, #32
 8002146:	f000 f80d 	bl	8002164 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));      
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002150:	3301      	adds	r3, #1
 8002152:	b29b      	uxth	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	2021      	movs	r0, #33	; 0x21
 8002158:	f000 f804 	bl	8002164 <ili9325_WriteReg>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <ili9325_WriteReg>:
  * @param  LCD_Reg: Address of the selected register.
  * @param  LCD_RegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	80bb      	strh	r3, [r7, #4]
  //LCD_IO_WriteReg(LCD_Reg);
  
  /* Write 16-bit GRAM Reg */
  //LCD_IO_WriteData(LCD_RegValue);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ili9325_Init();
 8002184:	f7ff feb2 	bl	8001eec <ili9325_Init>
	ili9325_DisplayOn();
 8002188:	f7ff ffa1 	bl	80020ce <ili9325_DisplayOn>
	DrawMenu(-1);
 800218c:	20ff      	movs	r0, #255	; 0xff
 800218e:	f7ff fbef 	bl	8001970 <DrawMenu>
	UseMenu();
 8002192:	f7ff fd67 	bl	8001c64 <UseMenu>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002196:	f7fe fded 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219a:	f000 f803 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219e:	f000 f86b 	bl	8002278 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <main+0x22>

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	; 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2230      	movs	r2, #48	; 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f93c 	bl	8002430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <SystemClock_Config+0xcc>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	; 0x40
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a21      	ldr	r2, [pc, #132]	; (8002274 <SystemClock_Config+0xd0>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002214:	2304      	movs	r3, #4
 8002216:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002218:	23a8      	movs	r3, #168	; 0xa8
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002220:	2304      	movs	r3, #4
 8002222:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe ff13 	bl	8001054 <HAL_RCC_OscConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002234:	f000 f83a 	bl	80022ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	230f      	movs	r3, #15
 800223a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223c:	2302      	movs	r3, #2
 800223e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002244:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2105      	movs	r1, #5
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f96c 	bl	8001534 <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002262:	f000 f823 	bl	80022ac <Error_Handler>
  }
}
 8002266:	bf00      	nop
 8002268:	3750      	adds	r7, #80	; 0x50
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_GPIO_Init+0x30>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <MX_GPIO_Init+0x30>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_GPIO_Init+0x30>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]

}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_MspInit+0x4c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_MspInit+0x4c>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_MspInit+0x4c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_MspInit+0x4c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_MspInit+0x4c>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f7fe fd5a 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <SystemInit+0x28>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <SystemInit+0x28>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SystemInit+0x28>)
 800237e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002382:	609a      	str	r2, [r3, #8]
#endif
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002398:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800239a:	e003      	b.n	80023a4 <LoopCopyDataInit>

0800239c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800239e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023a2:	3104      	adds	r1, #4

080023a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023ac:	d3f6      	bcc.n	800239c <CopyDataInit>
  ldr  r2, =_sbss
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023b0:	e002      	b.n	80023b8 <LoopFillZerobss>

080023b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023b4:	f842 3b04 	str.w	r3, [r2], #4

080023b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023bc:	d3f9      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023be:	f7ff ffd3 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c2:	f000 f811 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7ff fedb 	bl	8002180 <main>
  bx  lr    
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023d0:	0800250c 	.word	0x0800250c
  ldr  r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023d8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80023dc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80023e0:	20000040 	.word	0x20000040

080023e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC_IRQHandler>
	...

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4e0d      	ldr	r6, [pc, #52]	; (8002420 <__libc_init_array+0x38>)
 80023ec:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <__libc_init_array+0x3c>)
 80023ee:	1ba4      	subs	r4, r4, r6
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	2500      	movs	r5, #0
 80023f4:	42a5      	cmp	r5, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	4e0b      	ldr	r6, [pc, #44]	; (8002428 <__libc_init_array+0x40>)
 80023fa:	4c0c      	ldr	r4, [pc, #48]	; (800242c <__libc_init_array+0x44>)
 80023fc:	f000 f86a 	bl	80024d4 <_init>
 8002400:	1ba4      	subs	r4, r4, r6
 8002402:	10a4      	asrs	r4, r4, #2
 8002404:	2500      	movs	r5, #0
 8002406:	42a5      	cmp	r5, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002410:	4798      	blx	r3
 8002412:	3501      	adds	r5, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800241a:	4798      	blx	r3
 800241c:	3501      	adds	r5, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	08002504 	.word	0x08002504
 8002424:	08002504 	.word	0x08002504
 8002428:	08002504 	.word	0x08002504
 800242c:	08002508 	.word	0x08002508

08002430 <memset>:
 8002430:	4402      	add	r2, r0
 8002432:	4603      	mov	r3, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	d100      	bne.n	800243a <memset+0xa>
 8002438:	4770      	bx	lr
 800243a:	f803 1b01 	strb.w	r1, [r3], #1
 800243e:	e7f9      	b.n	8002434 <memset+0x4>

08002440 <round>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	ec57 6b10 	vmov	r6, r7, d0
 8002446:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800244a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800244e:	2c13      	cmp	r4, #19
 8002450:	463b      	mov	r3, r7
 8002452:	463d      	mov	r5, r7
 8002454:	dc17      	bgt.n	8002486 <round+0x46>
 8002456:	2c00      	cmp	r4, #0
 8002458:	da09      	bge.n	800246e <round+0x2e>
 800245a:	3401      	adds	r4, #1
 800245c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8002460:	d103      	bne.n	800246a <round+0x2a>
 8002462:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002466:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800246a:	2100      	movs	r1, #0
 800246c:	e02c      	b.n	80024c8 <round+0x88>
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <round+0x90>)
 8002470:	4122      	asrs	r2, r4
 8002472:	4217      	tst	r7, r2
 8002474:	d100      	bne.n	8002478 <round+0x38>
 8002476:	b19e      	cbz	r6, 80024a0 <round+0x60>
 8002478:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800247c:	4123      	asrs	r3, r4
 800247e:	442b      	add	r3, r5
 8002480:	ea23 0302 	bic.w	r3, r3, r2
 8002484:	e7f1      	b.n	800246a <round+0x2a>
 8002486:	2c33      	cmp	r4, #51	; 0x33
 8002488:	dd0d      	ble.n	80024a6 <round+0x66>
 800248a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800248e:	d107      	bne.n	80024a0 <round+0x60>
 8002490:	4630      	mov	r0, r6
 8002492:	4639      	mov	r1, r7
 8002494:	ee10 2a10 	vmov	r2, s0
 8002498:	f7fd fe9c 	bl	80001d4 <__adddf3>
 800249c:	4606      	mov	r6, r0
 800249e:	460f      	mov	r7, r1
 80024a0:	ec47 6b10 	vmov	d0, r6, r7
 80024a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295
 80024ae:	40d0      	lsrs	r0, r2
 80024b0:	4206      	tst	r6, r0
 80024b2:	d0f5      	beq.n	80024a0 <round+0x60>
 80024b4:	2201      	movs	r2, #1
 80024b6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80024ba:	fa02 f404 	lsl.w	r4, r2, r4
 80024be:	1931      	adds	r1, r6, r4
 80024c0:	bf28      	it	cs
 80024c2:	189b      	addcs	r3, r3, r2
 80024c4:	ea21 0100 	bic.w	r1, r1, r0
 80024c8:	461f      	mov	r7, r3
 80024ca:	460e      	mov	r6, r1
 80024cc:	e7e8      	b.n	80024a0 <round+0x60>
 80024ce:	bf00      	nop
 80024d0:	000fffff 	.word	0x000fffff

080024d4 <_init>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr

080024e0 <_fini>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr
